{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3 (ipykernel)",
            "language": "python"
        },
        "language_info": {
            "name": "python",
            "version": "3.8.10",
            "mimetype": "text/x-python",
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "pygments_lexer": "ipython3",
            "nbconvert_exporter": "python",
            "file_extension": ".py"
        },
        "celltoolbar": "Tags"
    },
    "nbformat_minor": 2,
    "nbformat": 4,
    "cells": [
        {
            "cell_type": "code",
            "source": [
                "## Análise de distribuição estatística dos dados - Histograma, normalidade e transformação Box-Cox\n",
                "\n",
                "## CÉLULA 1: Instruções de carregamento do arquivo e bibliotecas a ser importadas\n",
                "\n",
                "\"\"\"\"\n",
                "    Para executar uma CÉLULA, pressione o botão \"Run\" no topo, com a CÉLULA selecionada, ou pressione:\n",
                "    \n",
                "    Shift + Enter\n",
                "\n",
                "-Se seus dados estiverem em um arquivo xlsx utilize a CÉLULA 2\n",
                "\n",
                "-Se seus dados estiverem em um arquivo csv contendo cabeçalhos, utilize a CÉLULA 3\n",
                "\n",
                "-Se seus dados estiverem em um arquivo csv sem cabeçalhos, utilize a CÉLULA 4\n",
                "\n",
                "-Utilize apenas a CÉLULA correta\n",
                "-Substitua o texto entre aspas na variável \"caminho\" pelo endereço do arquivo em sua máquina.\n",
                "\n",
                "EXECUTE ESTA CÉLULA ANTES DE PROSSEGUIR\n",
                "\n",
                "EXECUTE APENAS UMA CÉLULA POR VEZ\n",
                "\n",
                "-Caso deseje apagar a saída de uma célula carregada, mas não deseje carregar uma nova saída, vá à aba superior, escolha o ícone\n",
                "do teclado (open the command palette/ jupyter-notebook command group) e selecione clear cell output.\n",
                "\n",
                "@author: Marco César Prado Soares, MSc.\n",
                "Especialista Lean Six Sigma Master Black Belt, Eng. Químico, MSc. Eng. Mecatrônica (instrumentação) \n",
                "Marco.Soares@br.ey.com; marcosoares.feq@gmail.com\n",
                "\"\"\"\n",
                "import pandas as pd\n",
                "import numpy as np\n",
                "import matplotlib.pyplot as plt"
            ],
            "metadata": {
                "tags": [
                    "CELL_1"
                ],
                "azdata_cell_guid": "ec386f22-8bf7-4a05-ad06-a2c69ec510ef"
            },
            "outputs": [],
            "execution_count": 2
        },
        {
            "cell_type": "code",
            "source": [
                "## CÉLULA 3: dados em arquivo csv com cabeçalho\n",
                "\n",
                "caminho = \"df_train.csv\"\n",
                "df_train = pd.read_csv(caminho)\n",
                "\n",
                "caminho = \"df_test.csv\"\n",
                "df_test = pd.read_csv(caminho)"
            ],
            "metadata": {
                "tags": [
                    "CELL_3"
                ],
                "azdata_cell_guid": "7bf90175-1d46-4f2d-b417-50028733d769"
            },
            "outputs": [],
            "execution_count": 6
        },
        {
            "cell_type": "markdown",
            "source": [
                "# CÉLULA 6: Instruções Gerais\n",
                "\n",
                "### ATENÇÃO: NÃO EXECUTE ESTA CÉLULA - Ela contém apenas texto explicativo\n",
                "\n",
                "Este notebook destina-se à análise de distribuição estatística dos dados, e transformação deles em dados que sigam a distribuição normal. À seguir, são dadas as análises disponíveis. Siga à célula correspondente à análise desejada:\n",
                "\n",
                "## 1) Histograma com ou sem curva normal ajustada\n",
                "\n",
                "- Aqui será construído o histograma dos dados.\n",
                "- Este sistema permite a verificação simultânea da curva normal ajustada.\n",
                "- O resultado pode ser prejudicado para dados com diferenças extremamente pequenas. Neste caso, pode ser mais interessante utilizar o comando de histograma do R (exemplo: hist(y,main=\"Histograma do valor de inventario\", xlab = \"Valor\", ylab = \"Contagem\", col=\"red\"), o qual já é otimizado para esta situação particular.\n",
                "- Também são retornados: \n",
                "    1) um resumo das estatísticas gerais dos dados: total de dados avaliados; média; desvio-padrão; valor mais elevado; valor \n",
                "        mais baixo; e bin size, a largura da barra do histograma.\n",
                "    2) a tabela de frequencias usada na construção do histograma\n",
                "\n",
                "Siga para as CÉLULAS 7 a 9.\n",
                "----------------------------------------\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "## 2) Testes de normalidade\n",
                "\n",
                "- Aqui será avaliado se os dados podem ser descritos por uma distribuição estatística do tipo normal, por meio de dois testes distintos: teste de Lilliefors e teste de Anderson-Darling.\n",
                "- Note que existem outros testes (em especial testes Anderson-Darling) destinados à avaliação de outras distribuições. O pacote nortest do R fornece uma gama de testes deste tipo, em variedade maior que o disponibilizado no pacote statsmodels do Python.\n",
                "- Este sistema retornará dois dataframes contendo p-valores, a probabilidade de uma hipótese-nula ser verdadeira. Neste caso, a hipótese-nula dos testes de hipótese (Lilliefors e Anderson-Darling) é que os dados seguem a normal.\n",
                "\n",
                "Siga para as CÉLULAS 10 a 12.\n",
                "----------------------------------------\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "## 3) Transformação Box-Cox\n",
                "\n",
                "- Este sistema transforma o conjunto de dados original em dados descritos pela curva normal.\n",
                "- Também os limites de especificação transformados.\n",
                "- Possibilita, assim, que seja analisado se os dados estão dentro das especificações.\n",
                "\n",
                "Siga para as CÉLULAS 13 a 15.\n",
                "----------------------------------------"
            ],
            "metadata": {
                "tags": [
                    "CELL_6"
                ],
                "azdata_cell_guid": "30366d74-7cb1-43b2-af54-a30036f3e8bd"
            }
        },
        {
            "cell_type": "code",
            "source": [
                "## CÉLULA 7: Função de construção do histograma dos dados\n",
                "\n",
                "#Execute esta CÉLULA para carregar a função\n",
                "\n",
                "def histogram(y, largura_da_barra, normal_curve_overlay = True, legenda_dos_dados = None, titulo_y = None, titulo_histograma = None):\n",
                "    \n",
                "    import pandas as pd\n",
                "    import matplotlib\n",
                "    import numpy as np\n",
                "    import matplotlib.pyplot as plt\n",
                "    \n",
                "    #Calculo do bin size - largura do histograma:\n",
                "    #1: Encontrar o menor (lowest) e o maior (highest) valor dentro da tabela de dados)\n",
                "    #2: Calcular rangehist = highest - lowest\n",
                "    #3: Calcular quantidade de dados (samplesize) de entrada fornecidos\n",
                "    #4: Calcular a quantidade de celulas da tabela de frequencias (ncells)\n",
                "    #ncells = numero inteiro mais proximo da (raiz quadrada de samplesize)\n",
                "    #5: Calcular binsize = rangehist/(ncells)\n",
                "    #ATENCAO: Nao se esquecer de converter range, ncells, samplesize e binsize para valores absolutos (modulos)\n",
                "    #isso porque a largura do histograma tem que ser um numero positivo\n",
                "\n",
                "    y = y.reset_index(drop=True)\n",
                "    #faz com que os indices desta serie sejam consecutivos e a partir de zero\n",
                "\n",
                "    #Estatisticas gerais: media (mu) e desvio-padrao (sigma)\n",
                "    mu = y.mean() \n",
                "    sigma = y.std() \n",
                "\n",
                "    #Calculo do bin-size\n",
                "    highest = y.max()\n",
                "    lowest = y.min()\n",
                "    rangehist = highest - lowest\n",
                "    rangehist = abs(rangehist)\n",
                "    #garante que sera um numero positivo\n",
                "    samplesize = y.count() #contagem do total de entradas\n",
                "    ncells = (samplesize)**0.5 #potenciacao: ** - raiz quadrada de samplesize\n",
                "    #resultado da raiz quadrada e sempre positivo\n",
                "    ncells = round(ncells) #numero \"redondo\" mais proximo\n",
                "    ncells = int(ncells) #parte inteira do numero arredondado\n",
                "    #ncells = numero de linhas da tabela de frequencias\n",
                "    binsize = rangehist/ncells\n",
                "    binsize = round(binsize)\n",
                "    binsize = int(binsize) #precisa ser inteiro\n",
                "    \n",
                "    #Construcao da tabela de frequencias\n",
                "\n",
                "    j = 0 #indice da tabela de frequencias\n",
                "    #Este indice e diferente do ordenamento dos valores em ordem crescente\n",
                "    xhist = []\n",
                "    #Lista vazia que contera os x do histograma\n",
                "    yhist = []\n",
                "    #Listas vazia que conteras o y do histograma\n",
                "    hist_labels = []\n",
                "    #Esta lista gravara os limites da barra na forma de strings\n",
                "\n",
                "    pontomediodabarra = lowest + binsize/2 \n",
                "    limitedabarra = lowest + binsize\n",
                "    #ponto medio da barra \n",
                "    #limite da primeira barra do histograma\n",
                "    seriedohist1 = y\n",
                "    seriedohist1 = seriedohist1.sort_values(ascending=True)\n",
                "    #serie com os valores em ordem crescente\n",
                "    seriedohist1 = seriedohist1.reset_index(drop=True)\n",
                "    #garante que a nova serie tenha indices consecutivos, iniciando em zero\n",
                "    i = 0 #linha inicial da serie do histograma em ordem crescente\n",
                "    valcomparado = seriedohist1[i]\n",
                "    #primeiro valor da serie, o mais baixo\n",
                "\n",
                "    while (j <= (ncells-1)):\n",
                "        \n",
                "        #para quando termina o numero de linhas da tabela\n",
                "        xhist.append(pontomediodabarra)\n",
                "        #tempo da tabela de frequencias\n",
                "        cont = 0\n",
                "        #variavel de contagem do histograma\n",
                "        #contagem deve ser reiniciada\n",
                "       \n",
                "        if (i < samplesize):\n",
                "            #2 condicionais para impedir que um termo de indice inexistente\n",
                "            #seja acessado\n",
                "            while (valcomparado <= limitedabarra) and (valcomparado < highest):\n",
                "                #o segundo criterio garante a parada em casos em que os dados sao\n",
                "                #muito proximos\n",
                "                    cont = cont + 1 #adiciona contagem a tabela de frequencias\n",
                "                    i = i + 1\n",
                "                    \n",
                "                    if (i < samplesize): \n",
                "                        valcomparado = seriedohist1[i]\n",
                "        \n",
                "        yhist.append(cont) #valor de ocorrencias contadas\n",
                "        \n",
                "        limite_infdabarra = pontomediodabarra - binsize/2\n",
                "        rotulo = \"%.2f - %.2f\" %(limite_infdabarra, limitedabarra)\n",
                "        #intervalo da tabela de frequencias\n",
                "        #%.2f: 2 casas decimais de aproximação\n",
                "        hist_labels.append(rotulo)\n",
                "        \n",
                "        pontomediodabarra = pontomediodabarra + binsize\n",
                "        #tanto os pontos medios quanto os limites se deslocam do mesmo intervalo\n",
                "        \n",
                "        limitedabarra = limitedabarra + binsize\n",
                "        #proxima barra\n",
                "        \n",
                "        j = j + 1\n",
                "    \n",
                "    #Temos que verificar se o valor maximo foi incluido\n",
                "    #isso porque o processo de aproximacao por numero inteiro pode ter\n",
                "    #arredondado para baixo e excluido o limite superior\n",
                "    #Porem, note que na ultima iteracao o limite superior da barra foi \n",
                "    #somado de binsize, mas como j ja e maior que ncells-1, o loop parou\n",
                "    \n",
                "    #assim, o limitedabarra nesse momento e o limite da barra que seria\n",
                "    #construida em seguida, nao da ultima barra da tabela de frequencias\n",
                "    #isso pode fazer com que esta barra ja seja maior que o highest\n",
                "    \n",
                "    #note porem que nao aumentamos o valor do limite inferior da barra\n",
                "    #por isso, basta vermos se ele mais o binsize sao menores que o valor mais alto\n",
                "    \n",
                "    \n",
                "    while ((limite_infdabarra+binsize) < highest):\n",
                "        \n",
                "        #vamos criar novas linhas ate que o ponto mais alto do histograma\n",
                "        #tenha sido contado\n",
                "        ncells = ncells + 1 #adiciona uma linha a tabela de frequencias\n",
                "        xhist.append(pontomediodabarra)\n",
                "        \n",
                "        cont = 0 #variavel de contagem do histograma\n",
                "        \n",
                "        while (valcomparado <= limitedabarra):\n",
                "                cont = cont + 1 #adiciona contagem a tabela de frequencias\n",
                "                i = i + 1\n",
                "                if (i < samplesize):\n",
                "                    valcomparado = seriedohist1[i]\n",
                "                    #apenas se i ainda nao e maior que o total de dados\n",
                "                \n",
                "                else: \n",
                "                    \n",
                "                    break\n",
                "        \n",
                "        #parar o loop se i atingiu um tamanho maior que a quantidade \n",
                "        #de dados.Temos que ter este cuidado porque estamos acrescentando\n",
                "        #mais linhas a tabela de frequencias para corrigir a aproximacao\n",
                "        #de ncells por um numero inteiro\n",
                "        \n",
                "        yhist.append(cont) #valor de ocorrencias contadas\n",
                "        \n",
                "        limite_infdabarra = pontomediodabarra - binsize/2\n",
                "        rotulo = \"%.2f - %.2f\" %(limite_infdabarra, limitedabarra)\n",
                "        #intervalo da tabela de frequencias - 2 casas decimais\n",
                "        hist_labels.append(rotulo)\n",
                "        \n",
                "        pontomediodabarra = pontomediodabarra + binsize\n",
                "        #tanto os pontos medios quanto os limites se deslocam do mesmo intervalo\n",
                "        \n",
                "        limitedabarra = limitedabarra + binsize\n",
                "        #proxima barra\n",
                "        \n",
                "    estatisticas_col1 = []\n",
                "    #contera as descricoes das colunas da tabela de estatisticas gerais\n",
                "    estatisticas_col2 = []\n",
                "    #contera os valores da tabela de estatisticas gerais\n",
                "    \n",
                "    estatisticas_col1.append(\"Total de dados avaliados\")\n",
                "    estatisticas_col2.append(samplesize)\n",
                "    estatisticas_col1.append(\"Média (mu)\")\n",
                "    estatisticas_col2.append(mu)\n",
                "    estatisticas_col1.append(\"Desvio-padrão (sigma)\")\n",
                "    estatisticas_col2.append(sigma)\n",
                "    estatisticas_col1.append(\"Valor mais elevado\")\n",
                "    estatisticas_col2.append(highest)\n",
                "    estatisticas_col1.append(\"Valor mais baixo\")\n",
                "    estatisticas_col2.append(lowest)\n",
                "    estatisticas_col1.append(\"Range dos dados\\n(valor máximo - valor mínimo)\")\n",
                "    estatisticas_col2.append(rangehist)\n",
                "    estatisticas_col1.append(\"Bin size\\n(largura da barra do histograma)\")\n",
                "    estatisticas_col2.append(binsize)\n",
                "    estatisticas_col1.append(\"Quantidade de linhas\\nna tabela de frequências\")\n",
                "    estatisticas_col2.append(ncells)\n",
                "    #como o comando append grava linha a linha em sequencia, garantimos\n",
                "    #a correspondencia das colunas\n",
                "    #Assim como em qualquer string, incluindo de rotulos de graficos\n",
                "    #os \\n sao lidos como quebra de linha\n",
                "    \n",
                "    d1 = {\"Estatísticas gerais dos dados\": estatisticas_col1, \"Valor calculado\": estatisticas_col2}\n",
                "    #dicionario das duas series, para criar o dataframe com as descricoes\n",
                "    estatisticas_gerais = pd.DataFrame(data = d1)\n",
                "    \n",
                "    #Casos os títulos estejam presentes (valor nao e None):\n",
                "    #vamos utiliza-los\n",
                "    #Caso contrario, vamos criar nomenclaturas genericas para o histograma\n",
                "    \n",
                "    eixo_y = \"Counting/Frequency\"\n",
                "    \n",
                "    if not (legenda_dos_dados is None):\n",
                "        xlabel = legenda_dos_dados\n",
                "    \n",
                "    else:\n",
                "        xlabel = \"Frequency\\n table data\"\n",
                "    \n",
                "    if not (titulo_y is None):\n",
                "        eixo_x = titulo_y\n",
                "        #lembre-se que no histograma, os dados originais vao pro eixo X\n",
                "        #O eixo Y vira o eixo da contagem/frequencia daqueles dados\n",
                "    \n",
                "    else:\n",
                "        eixo_x = \"X: Mean value of the interval\"\n",
                "    \n",
                "    if not (titulo_histograma is None):\n",
                "        string1 = \"- $\\mu = %.2f$, $\\sigma = %.2f$\" %(mu, sigma)\n",
                "        main_label = titulo_histograma + string1\n",
                "        #concatena a string do titulo a string com a media e desvio-padrao\n",
                "        #%.2f: o numero entre %. e f indica a quantidade de casas decimais da \n",
                "        #variavel float f. No caso, arredondamos para 2 casas\n",
                "        #NAO SE ESQUECA DO PONTO: ele que indicara que sera arredondado o \n",
                "        #numero de casas\n",
                "    \n",
                "    else:\n",
                "        main_label = \"Data Histogram - $\\mu = %.2f$, $\\sigma = %.2f$\" %(mu, sigma)\n",
                "        #os simbolos $\\ $ substituem o simbolo pela letra grega\n",
                "    \n",
                "    d2 = {\"Intervalos considerados\": hist_labels, eixo_x: xhist, eixo_y: yhist}\n",
                "    #dicionario que compoe a tabela de frequencias\n",
                "    tab_frequencias = pd.DataFrame(data = d2)\n",
                "    #cria a tabela de frequencias como um dataframe de saida\n",
                "    \n",
                "    \"\"\"\n",
                "    Normal curve equation\n",
                "    \n",
                "    y = p(X) = (1/((sigma)*sqrt(2*pi)))*exp((-1)*(X-mu)²/2(sigma²))\n",
                "    0 <= p(X) <= 1\n",
                "    mu = mean value of X\n",
                "    sigma = standard deviation of X\n",
                "    sqrt = square root function\n",
                "    pi = 3.14159...\n",
                "    e = 2.71828...\n",
                "    exp = e** = e^ = exponential function\n",
                "    \n",
                "    numpy functions available:\n",
                "        np.sqrt(X): square root of X\n",
                "        np.pi = value of pi\n",
                "        np.exp(X) = exponential function of X = e**X = e^X = exp(X)\n",
                "    \n",
                "    \"\"\"\n",
                "    #parametros da normal ja calculados:\n",
                "    #mu e sigma\n",
                "    #numero de bins: ncells\n",
                "    #limites de especificacao: lsl,usl - target\n",
                "    \n",
                "    #valor maximo do histograma\n",
                "    max_hist = max(yhist)\n",
                "    #seleciona o valor maximo da serie, para ajustar a curva normal\n",
                "    #isso porque a normal é criada com valores entre 0 e 1\n",
                "    #multiplicando ela por max_hist, fazemos ela se adequar a altura do histograma\n",
                "    \n",
                "    if (normal_curve_overlay == True):\n",
                "        \n",
                "        #construir a normal ajustada/esperada\n",
                "        #vamos criar pontos ao redor da media mu - 4sigma ate mu + 4sigma, \n",
                "        #de modo a garantir a quase totalidade da curva normal. \n",
                "        #O incremento será de 0.10 sigma a cada iteracao\n",
                "        x_inf = mu -(4)*sigma\n",
                "        x_sup = mu + 4*sigma\n",
                "        x_inc = (0.10)*sigma\n",
                "        \n",
                "        x_normal_adj = []\n",
                "        y_normal_adj = []\n",
                "        \n",
                "        x_adj = x_inf\n",
                "        y_adj = ((1 / (np.sqrt(2 * np.pi) * sigma)) *np.exp(-0.5 * (1 / sigma * (x_adj - mu))**2))\n",
                "        x_normal_adj.append(x_adj)\n",
                "        y_normal_adj.append(y_adj)\n",
                "        \n",
                "        while(x_adj < x_sup): \n",
                "            \n",
                "            x_adj = x_adj + x_inc\n",
                "            y_adj = ((1 / (np.sqrt(2 * np.pi) * sigma)) *np.exp(-0.5 * (1 / sigma * (x_adj - mu))**2))\n",
                "            x_normal_adj.append(x_adj)\n",
                "            y_normal_adj.append(y_adj)\n",
                "        \n",
                "        #vamos ajustar a altura da curva ao histograma. Para isso, precisamos\n",
                "        #calcular quantas vezes o ponto mais alto do histograma é maior que o ponto\n",
                "        #mais alto da normal (chamaremos essa relação de fator). A seguir,\n",
                "        #multiplicamos cada elemento da normal por este mesmo fator\n",
                "        max_normal = max(y_normal_adj) \n",
                "        #maximo da normal ajustada, numero entre 0 e 1\n",
                "        \n",
                "        fator = (max_hist)/(max_normal)\n",
                "        size_normal = len(y_normal_adj) #quantidade de dados criados\n",
                "        \n",
                "        i = 0\n",
                "        while (i < size_normal):\n",
                "            y_normal_adj[i] = (y_normal_adj[i])*(fator)\n",
                "            i = i + 1\n",
                "    \n",
                "    #Fazer o grafico\n",
                "    fig, ax = plt.subplots()\n",
                "    \n",
                "    ax.bar(xhist, yhist, width = largura_da_barra, label=xlabel, color='blue')\n",
                "    #ajuste manualmente a largura, width, para deixar as barras mais ou menos proximas\n",
                "    \n",
                "    if (normal_curve_overlay == True):\n",
                "    \n",
                "        #adicionar a normal\n",
                "        ax.plot(x_normal_adj, y_normal_adj, color = 'black', label = 'Adjusted/expected\\n normal curve')\n",
                "    \n",
                "    ax.set_xlabel(eixo_x)\n",
                "    ax.set_ylabel(eixo_y)\n",
                "    ax.set_title(main_label)\n",
                "    ax.set_xticks(xhist)\n",
                "    \n",
                "    ax.legend()\n",
                "    ax.grid(True) #mude para False, caso não deseje ver as linhas de grade\n",
                "    \n",
                "    fig.tight_layout()\n",
                "    plt.show()\n",
                "\n",
                "    return estatisticas_gerais, tab_frequencias"
            ],
            "metadata": {
                "tags": [
                    "CELL_7"
                ],
                "azdata_cell_guid": "710a63f4-3a6b-4d27-b4a2-d2fcb1c8fada"
            },
            "outputs": [],
            "execution_count": 7
        },
        {
            "cell_type": "markdown",
            "source": [
                "# CÉLULA 8: Função para construção do histograma e da tabela de frequência dos dados\n",
                "\n",
                "### ATENÇÃO: NÃO EXECUTE ESTA CÉLULA - Ela contém apenas texto explicativo    \n",
                "    \n",
                "INSTRUÇÕES:\n",
                "\n",
                "1) Esta função retorna 2 dataframes:\n",
                "    \n",
                "    1) dataframe estatisticas_gerais, um resumo das estatísticas gerais dos dados: total de dados avaliados; média; desvio-padrão; valor mais elevado; valor mais baixo; e bin size, a largura da barra do histograma.\n",
                "    \n",
                "    2) dataframe tab_frequencias, que mostra a tabela de frequencias usada na construção do histograma\n",
                "\n",
                "2) Os parâmetros x e y da função devem ser apenas listas, não dataframe(s)\n",
                "\n",
                "3) Esta função retorna 2 dataframes. Deste modo, você precisa chamar 2 daframes, não apenas um.\n",
                "\n",
                "Exemplo: caso deseje salvar o dataframe estatisticas_gerais em df1,  e o dataframe tab_frequencias em df2, e os dados estão na variável y:\n",
                "    \n",
                "       df1, df2 = histogram(y, largura_da_barra = 10, normal_curve_overlay = True, legenda_dos_dados = None, titulo_y = None, titulo_histograma = None)\n",
                "    \n",
                "Note que o primeiro será sempre estatisticas_gerais, e o segundo será tab_frequencias\n",
                "\n",
                "Você pode dar outros nomes para os dataframes chamados:\n",
                "   \n",
                "       estatisticas_gerais, tab_frequencias = histogram(y, largura_da_barra = 10, normal_curve_overlay = True, legenda_dos_dados = None, titulo_y = None, titulo_histograma = None)\n",
                "\n",
                "4) Caso QUEIRA mostrar a curva normal ajustada, mantenha:\n",
                "    \n",
                "        normal_curve_overlay = True\n",
                "\n",
                "CASO NAO QUEIRA MOSTRAR A NORMAL:\n",
                "    \n",
                "        normal_curve_overlay = False\n",
                "\n",
                "5) Altere o valor de largura_da_barra até conseguir ver o histograma de forma clara\n",
                "    \n",
                "6) Os demais parâmetros são textos (strings). Declare-os entre aspas ou mantenha o valor None\n",
                "    \n",
                "##### NOTA: ESTE ALGORITMO PODE FALHAR CASO TODOS OS DADOS SEJAM MUITO PRÓXIMOS. \n",
                "\n",
                "Isso porque a largura ncells teria de ser tão larga que uma única barra englobaria todos os dados. Além disso, principalmente quando se usa a transformação Box-Cox, a diferença entre os dados transformados pode ser baixa demais para que a memória \n",
                "disponível no sistema identifique eles como números efetivamente diferentes (no arredondamento, eles passam a ser considerados iguais, fazendo com que o loop de comparação que verifica se um dado está numa barra ou na seguinte não possa ser finalizado. Isto gera MemoryError).\n",
                "\n",
                "CASO QUEIRA, mesmo assim, CONSTRUIR O HISTOGRAMA, apague as linhas de cálculo do bin size (de binsize = rangehist/ncells até binsize = int(binsize)) e substitua por um valor desejado de binsize. Por exemplo, substitua as linhas por:\n",
                "    \n",
                "    binsize = 10\n",
                "\n",
                "Assim, você definirá manualmente o tamanho da barra, podendo \"esticá-la\" para englobar todos os dados."
            ],
            "metadata": {
                "tags": [
                    "CELL_8"
                ],
                "azdata_cell_guid": "612bf930-0a47-4c24-9cbb-a8bc798c22d2"
            }
        },
        {
            "cell_type": "code",
            "source": [
                "## CÉLULA 9: CONSTRUÇÃO DO HISTOGRAMA PARA SEUS DADOS\n",
                "\n",
                "#DEFINA A VARIAVEL y para a qual será construído o histograma. \n",
                "#Basta substituir o valor entre aspas pelo nome da coluna onde está Y:\n",
                "\n",
                "y_train = df_train['runtime']\n",
                "y_test = df_test['runtime']\n",
                "\n",
                "#NOTA: o valor y necessariamente deve ser uma série.\n",
                "\n",
                "estatisticas_gerais_train, tab_frequencias_train = histogram(y = y_train, largura_da_barra = 50, normal_curve_overlay = True, legenda_dos_dados = None, titulo_y = None, titulo_histograma = None)\n",
                "\n",
                "# Altere manualmente o valor numérico da largura_da_barra do histograma até alcançar um espaçamento mínimo entre barras\n",
                "#consecutivas. O valor da largura da barra depende de cada conjunto particular de dados utilizado.\n",
                "\n",
                "\"\"\"\n",
                "Substitua os demais campos None de acordo com as instruções dadas na CÉLULA 8.\n",
                "- Os títulos e legendas devem ser fornecidos como um texto entre aspas.\n",
                "- Modifique normal_curve_overlay = True para normal_curve_overlay = False caso não deseje ver a normal sobreposta.\n",
                "\n",
                "\"\"\"\n",
                "\n",
                "estatisticas_gerais_train\n",
                "tab_frequencias_train\n",
                "\n",
                "\"\"\"VOCÊ DESEJA EXPORTAR OS DADOS?\n",
                "Caso deseje exportar os dados, copie as seguintes linhas para o espaço não-vermelho após as aspas. Substitua o endereço pela\n",
                "pasta onde você deseja salvar seu arquivo. Substitua estatisticas e tabela_freq pelos nomes que deseja para seus arquivos. \n",
                "Mantenha a extensão csv. Você pode também optar por exportar apenas uma das tabelas (neste caso, copie apenas a desejada).\n",
                "\n",
                "estatisticas_gerais.to_csv(r\"D:\\Drive\\FM2S\\EAD\\Green Belt em Python\\Machine Learning - módulo 3 - ANN classification\\ANN.Class - 1 - user satisfaction\\estatisticas.csv\", index = False)\n",
                "\n",
                "tab_frequencias.to_csv(r\"D:\\Drive\\FM2S\\EAD\\Green Belt em Python\\Machine Learning - módulo 3 - ANN classification\\ANN.Class - 1 - user satisfaction\\tabela_freq.csv\", index = False)\n",
                "\n",
                "\"\"\""
            ],
            "metadata": {
                "tags": [
                    "CELL_9"
                ],
                "azdata_cell_guid": "66cc8551-80ac-46c2-ae53-b4eb68e247bb"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<Figure size 432x288 with 1 Axes>",
                        "image/png": "\n"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": "'VOCÊ DESEJA EXPORTAR OS DADOS?\\nCaso deseje exportar os dados, copie as seguintes linhas para o espaço não-vermelho após as aspas. Substitua o endereço pela\\npasta onde você deseja salvar seu arquivo. Substitua estatisticas e tabela_freq pelos nomes que deseja para seus arquivos. \\nMantenha a extensão csv. Você pode também optar por exportar apenas uma das tabelas (neste caso, copie apenas a desejada).\\n\\nestatisticas_gerais.to_csv(r\"D:\\\\Drive\\\\FM2S\\\\EAD\\\\Green Belt em Python\\\\Machine Learning - módulo 3 - ANN classification\\\\ANN.Class - 1 - user satisfaction\\\\estatisticas.csv\", index = False)\\n\\ntab_frequencias.to_csv(r\"D:\\\\Drive\\\\FM2S\\\\EAD\\\\Green Belt em Python\\\\Machine Learning - módulo 3 - ANN classification\\\\ANN.Class - 1 - user satisfaction\\tabela_freq.csv\", index = False)\\n\\n'"
                    },
                    "metadata": {},
                    "execution_count": 9,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 9
        },
        {
            "cell_type": "code",
            "source": [
                "estatisticas_gerais_train"
            ],
            "metadata": {
                "azdata_cell_guid": "5582d1db-4811-4874-915d-c0f11212682e"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "                    Estatísticas gerais dos dados  Valor calculado\n0                        Total de dados avaliados       100.000000\n1                                      Média (mu)       206.310000\n2                           Desvio-padrão (sigma)        46.342749\n3                              Valor mais elevado       362.000000\n4                                Valor mais baixo       128.000000\n5  Range dos dados\\n(valor máximo - valor mínimo)       234.000000\n6      Bin size\\n(largura da barra do histograma)        23.000000\n7  Quantidade de linhas\\nna tabela de frequências        11.000000",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estatísticas gerais dos dados</th>\n      <th>Valor calculado</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Total de dados avaliados</td>\n      <td>100.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Média (mu)</td>\n      <td>206.310000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Desvio-padrão (sigma)</td>\n      <td>46.342749</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Valor mais elevado</td>\n      <td>362.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Valor mais baixo</td>\n      <td>128.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Range dos dados\\n(valor máximo - valor mínimo)</td>\n      <td>234.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Bin size\\n(largura da barra do histograma)</td>\n      <td>23.000000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Quantidade de linhas\\nna tabela de frequências</td>\n      <td>11.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 10,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 10
        },
        {
            "cell_type": "code",
            "source": [
                "tab_frequencias_train"
            ],
            "metadata": {
                "azdata_cell_guid": "87e76873-04d4-4d8e-9eff-8c522c7e09bb"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "   Intervalos considerados  X: Mean value of the interval  Counting/Frequency\n0          128.00 - 151.00                          139.5                   7\n1          151.00 - 174.00                          162.5                  18\n2          174.00 - 197.00                          185.5                  23\n3          197.00 - 220.00                          208.5                  25\n4          220.00 - 243.00                          231.5                  10\n5          243.00 - 266.00                          254.5                   4\n6          266.00 - 289.00                          277.5                   8\n7          289.00 - 312.00                          300.5                   1\n8          312.00 - 335.00                          323.5                   1\n9          335.00 - 358.00                          346.5                   2\n10         358.00 - 381.00                          369.5                   1",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Intervalos considerados</th>\n      <th>X: Mean value of the interval</th>\n      <th>Counting/Frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>128.00 - 151.00</td>\n      <td>139.5</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>151.00 - 174.00</td>\n      <td>162.5</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>174.00 - 197.00</td>\n      <td>185.5</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>197.00 - 220.00</td>\n      <td>208.5</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>220.00 - 243.00</td>\n      <td>231.5</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>243.00 - 266.00</td>\n      <td>254.5</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>266.00 - 289.00</td>\n      <td>277.5</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>289.00 - 312.00</td>\n      <td>300.5</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>312.00 - 335.00</td>\n      <td>323.5</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>335.00 - 358.00</td>\n      <td>346.5</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>358.00 - 381.00</td>\n      <td>369.5</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 11,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 11
        },
        {
            "cell_type": "markdown",
            "source": [
                "**<mark>Histograma dos dados de teste</mark>**"
            ],
            "metadata": {
                "azdata_cell_guid": "115fcaf3-667d-4c57-a4c3-95edfa71b0c7"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "estatisticas_gerais_test, tab_frequencias_test = histogram(y = y_test, largura_da_barra = 50, normal_curve_overlay = True, legenda_dos_dados = None, titulo_y = None, titulo_histograma = None)\r\n",
                "\r\n",
                "# Altere manualmente o valor numérico da largura_da_barra do histograma até alcançar um espaçamento mínimo entre barras\r\n",
                "#consecutivas. O valor da largura da barra depende de cada conjunto particular de dados utilizado.\r\n",
                "\r\n",
                ""
            ],
            "metadata": {
                "azdata_cell_guid": "1588b051-0ccd-496d-8f6a-8760526baf5a"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<Figure size 432x288 with 1 Axes>",
                        "image/png": "\n"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "execution_count": 13
        },
        {
            "cell_type": "code",
            "source": [
                "estatisticas_gerais_test"
            ],
            "metadata": {
                "azdata_cell_guid": "bedd4ae2-57ad-48c9-8db6-f59d20077be1"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "                    Estatísticas gerais dos dados  Valor calculado\n0                        Total de dados avaliados       100.000000\n1                                      Média (mu)       130.960000\n2                           Desvio-padrão (sigma)        53.593479\n3                              Valor mais elevado       303.000000\n4                                Valor mais baixo        31.000000\n5  Range dos dados\\n(valor máximo - valor mínimo)       272.000000\n6      Bin size\\n(largura da barra do histograma)        27.000000\n7  Quantidade de linhas\\nna tabela de frequências        11.000000",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estatísticas gerais dos dados</th>\n      <th>Valor calculado</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Total de dados avaliados</td>\n      <td>100.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Média (mu)</td>\n      <td>130.960000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Desvio-padrão (sigma)</td>\n      <td>53.593479</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Valor mais elevado</td>\n      <td>303.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Valor mais baixo</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Range dos dados\\n(valor máximo - valor mínimo)</td>\n      <td>272.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Bin size\\n(largura da barra do histograma)</td>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Quantidade de linhas\\nna tabela de frequências</td>\n      <td>11.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 14,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 14
        },
        {
            "cell_type": "code",
            "source": [
                "tab_frequencias_test"
            ],
            "metadata": {
                "azdata_cell_guid": "52b4623c-bacb-49a9-8861-cea1f1f91496"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "   Intervalos considerados  X: Mean value of the interval  Counting/Frequency\n0            31.00 - 58.00                           44.5                  12\n1            58.00 - 85.00                           71.5                  12\n2           85.00 - 112.00                           98.5                  11\n3          112.00 - 139.00                          125.5                  19\n4          139.00 - 166.00                          152.5                  23\n5          166.00 - 193.00                          179.5                  11\n6          193.00 - 220.00                          206.5                   8\n7          220.00 - 247.00                          233.5                   3\n8          247.00 - 274.00                          260.5                   0\n9          274.00 - 301.00                          287.5                   0\n10         301.00 - 328.00                          314.5                   1",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Intervalos considerados</th>\n      <th>X: Mean value of the interval</th>\n      <th>Counting/Frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>31.00 - 58.00</td>\n      <td>44.5</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>58.00 - 85.00</td>\n      <td>71.5</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>85.00 - 112.00</td>\n      <td>98.5</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>112.00 - 139.00</td>\n      <td>125.5</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>139.00 - 166.00</td>\n      <td>152.5</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>166.00 - 193.00</td>\n      <td>179.5</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>193.00 - 220.00</td>\n      <td>206.5</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>220.00 - 247.00</td>\n      <td>233.5</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>247.00 - 274.00</td>\n      <td>260.5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>274.00 - 301.00</td>\n      <td>287.5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>301.00 - 328.00</td>\n      <td>314.5</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 15,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 15
        },
        {
            "cell_type": "code",
            "source": [
                "## CÉLULA 10: Função de avaliação da normalidade dos dados(probabilidade de os dados serem representados por uma curva normal)\n",
                "\n",
                "#Execute esta CÉLULA para carregar a função\n",
                "\n",
                "def testes_normalidade(y, alpha = 0.10):\n",
                "    import pandas as pd\n",
                "    from statsmodels.stats import diagnostic\n",
                "    \n",
                "    lista1 = []\n",
                "    #esta lista sera a primeira coluna, com as descrições das demais\n",
                "    lista1.append(\"p-valor: probabilidade de os dados serem descritos pela normal\")\n",
                "    lista1.append(\"Probabilidade de seguir a normal (%)\")\n",
                "    lista1.append(\"alpha\")\n",
                "    lista1.append(\"Critério: não segue a normal se p < alpha = %.3f\" %(alpha))\n",
                "    #%.3f apresenta f com 3 casas decimais\n",
                "    #%f se refere a uma variavel float\n",
                "    #informa ao usuario o valor definido para a rejeição\n",
                "    lista1.append(\"Dados são descritos ou não pela normal?\")\n",
                "    #Note que o comando append adiciona os elementos em sequencia, linha a linha\n",
                "    #nao se especifica indice, pois ja esta subentendido que esta na proxima\n",
                "    #linha\n",
                "    \n",
                "    #Lilliefors’ test\n",
                "    lilliefors_test = diagnostic.kstest_normal(y, dist='norm', pvalmethod='table')\n",
                "    #Return: linha 1: ksstat: float\n",
                "    #Kolmogorov-Smirnov test statistic with estimated mean and variance.\n",
                "    #Linha 2: p-value:float\n",
                "    #If the pvalue is lower than some threshold, e.g. 0.10, then we can reject the Null hypothesis that the sample comes from a normal distribution.\n",
                "    \n",
                "    #criar lista apenas com o p-valor\n",
                "    p_lillie = []\n",
                "    p_lillie.append(lilliefors_test[1]) #p-valor\n",
                "    p_lillie.append(100*lilliefors_test[1]) #p em porcentagem\n",
                "    p_lillie.append(alpha)\n",
                "    \n",
                "    if (lilliefors_test[1] < alpha):\n",
                "        p_lillie.append(\"p = %.3f < %.3f\" %(lilliefors_test[1], alpha))\n",
                "        p_lillie.append(\"Dados não são descritos pela normal\")\n",
                "    else:\n",
                "        p_lillie.append(\"p = %.3f >= %.3f\" %(lilliefors_test[1], alpha))\n",
                "        p_lillie.append(\"Dados são descritos pela normal\")\n",
                "        \n",
                "    \n",
                "    #Anderson-Darling\n",
                "    ad_test = diagnostic.normal_ad(y, axis=0)\n",
                "    #Return: Linha 1: ad2: float\n",
                "    #Anderson Darling test statistic.\n",
                "    #Linha 2: p-val: float\n",
                "    #The p-value for hypothesis that the data comes from a normal distribution with unknown mean and variance.\n",
                "    \n",
                "    #criar lista apenas com o p-valor\n",
                "    p_ad = []\n",
                "    p_ad.append(ad_test[1]) #p-valor\n",
                "    p_ad.append(100*ad_test[1]) #p em porcentagem\n",
                "    p_ad.append(alpha)\n",
                "    \n",
                "    if (ad_test[1] < alpha):\n",
                "        p_ad.append(\"p = %.3f < %.3f\" %(ad_test[1], alpha))\n",
                "        p_ad.append(\"Dados não são descritos pela normal\")\n",
                "    else:\n",
                "        p_ad.append(\"p = %.3f >= %.3f\" %(ad_test[1], alpha))\n",
                "        p_ad.append(\"Dados são descritos pela normal\")\n",
                "    \n",
                "    #NOTA: o comando %f apresenta a variavel float com todas as casas\n",
                "    #decimais possiveis. Se desejamos um numero certo de casas decimais\n",
                "    #acrescentamos esse numero a frente. Exemplos: %.1f: 1 casa decimal\n",
                "    # %.2f: 2 casas; %.3f: 3 casas decimais, %.4f: 4 casas\n",
                "    \n",
                "    d = {'Parâmetros e Interpretações': lista1, 'Teste de Lilliefors': p_lillie, 'Teste de Anderson-Darling': p_ad}\n",
                "    \n",
                "    #dicionario dos valores obtidos\n",
                "    df = pd.DataFrame(data = d)\n",
                "    #dataframe de saída\n",
                "    \n",
                "    return df"
            ],
            "metadata": {
                "tags": [
                    "CELL_10"
                ],
                "azdata_cell_guid": "17a7e788-2246-4c85-88b8-6eba3f490d8e"
            },
            "outputs": [],
            "execution_count": 12
        },
        {
            "cell_type": "markdown",
            "source": [
                "# CÉLULA 11: Função para avaliar normalidade dos dados\n",
                "\n",
                "### ATENÇÃO: NÃO EXECUTE ESTA CÉLULA - Ela contém apenas texto explicativo\n",
                "\n",
                "Avaliação se os dados seguem a distribuição normal, de acordo com os testes de Lilliefors e Anderson-Darling\n",
                "\n",
                "INSTRUÇÕES:\n",
                "\n",
                "1) Esta função retorna 1 dataframe:\n",
                "    dataframe df1 contendo os p-valores dos testes de normalidade dos dados.\n",
                "\n",
                "2) O parâmetro y da função deve ser apenas uma lista, não um dataframe.\n",
                "\n",
                "3) p-valor: probabilidade da hipótese-nula do teste de hipótese ser verdadeira\n",
                "\n",
                "Hipótese-nula H0: os dados seguem uma distribuição normal\n",
                "Hipótese alternativa H1: os dados não seguem a normal\n",
                "\n",
                "4) o p-valor é uma probabilidade, i.e., um valor entre 0 e 1\n",
                "\n",
                "5) 100 vezes o p-valor é a probabilidade em porcentagem\n",
                "        \n",
                "        Exemplo: se p = 0.20, a probabilidade é 0.20 ou 20% de os dados serem descritos pela normal\n",
                "\n",
                "6) Critério de rejeição: define-se um valor alpha tal que, se p < alpha, rejeitamos a hipótese-nula, ou seja, consideramos que os dados não seguem a normal\n",
                "\n",
                "###### 7) em geral, tomamos alpha = 0.10 - ou seja, se p < 0,10 (se há menos de 10% de probabilidade de seguirem a normal), consideramos que os dados não seguem a distribuição\n",
                "\n",
                "##### 8) Alguns autores são mais rigorosos, considerando alpha = 0.05 - ou seja, só rejeitam a normal se existe menos de 5% de probabilidade de os dados serem descritos por uma normal.\n",
                "\n",
                "### PORTANTO: MANTENHA alpha = 0.10 \n",
                "                \n",
                "                OU \n",
                "\n",
                "### ALTERE para alpha = 0.05"
            ],
            "metadata": {
                "tags": [
                    "CELL_11"
                ],
                "azdata_cell_guid": "d32893fc-03b2-4bbd-8b23-698028fc8aa1"
            }
        },
        {
            "cell_type": "markdown",
            "source": [
                "Normalidade dos dados de treino"
            ],
            "metadata": {
                "azdata_cell_guid": "c9ddb048-c024-4325-9016-d97f226cef24"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "## CÉLULA 12: AVALIAÇÃO DE NORMALIDADE DOS SEUS DADOS\n",
                "\n",
                "#DEFINA A VARIAVEL y para a qual será construído o histograma. \n",
                "#Basta substituir o valor entre aspas pelo nome da coluna onde está Y:\n",
                "\n",
                "y_train = df_train['runtime']\n",
                "y_test = df_test['runtime']\n",
                "\n",
                "#NOTA: o valor y necessariamente deve ser uma série.\n",
                "\n",
                "normality_train = testes_normalidade(y = y_train, alpha = 0.10)\n",
                "normality_test = testes_normalidade(y = y_test, alpha = 0.10)\n",
                "\n",
                "\"\"\"\n",
                "Substitua o valor alpha de acordo com as instruções dadas na CÉLULA 11. \n",
                "\n",
                "\"\"\"\n",
                "\n",
                "\n",
                "\"\"\"VOCÊ DESEJA EXPORTAR OS DADOS?\n",
                "Caso deseje exportar os dados, copie a seguinte linha para o espaço não-vermelho após as aspas. Substitua o endereço pela\n",
                "pasta onde você deseja salvar seu arquivo. Substitua dataframe pelo nome que deseja para seu arquivo. Mantenha\n",
                "a extensão csv\n",
                "\n",
                "df.to_csv(r\"D:\\Drive\\FM2S\\EAD\\Green Belt em Python\\Machine Learning - módulo 3 - ANN classification\\ANN.Class - 1 - user satisfaction\\dataframe.csv\", index = False)\n",
                "\n",
                "\"\"\""
            ],
            "metadata": {
                "tags": [
                    "CELL_12"
                ],
                "azdata_cell_guid": "d56cf297-01ea-49ab-9f80-eaa56592cc83"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "'VOCÊ DESEJA EXPORTAR OS DADOS?\\nCaso deseje exportar os dados, copie a seguinte linha para o espaço não-vermelho após as aspas. Substitua o endereço pela\\npasta onde você deseja salvar seu arquivo. Substitua dataframe pelo nome que deseja para seu arquivo. Mantenha\\na extensão csv\\n\\ndf.to_csv(r\"D:\\\\Drive\\\\FM2S\\\\EAD\\\\Green Belt em Python\\\\Machine Learning - módulo 3 - ANN classification\\\\ANN.Class - 1 - user satisfaction\\\\dataframe.csv\", index = False)\\n\\n'"
                    },
                    "metadata": {},
                    "execution_count": 17,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 17
        },
        {
            "cell_type": "code",
            "source": [
                "normality_train"
            ],
            "metadata": {
                "azdata_cell_guid": "5ef613a1-adaf-4a41-9041-20612e698144"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "                         Parâmetros e Interpretações  \\\n0  p-valor: probabilidade de os dados serem descr...   \n1               Probabilidade de seguir a normal (%)   \n2                                              alpha   \n3  Critério: não segue a normal se p < alpha = 0.100   \n4            Dados são descritos ou não pela normal?   \n\n                   Teste de Lilliefors            Teste de Anderson-Darling  \n0                                0.001                             0.000059  \n1                                  0.1                             0.005933  \n2                                  0.1                                  0.1  \n3                    p = 0.001 < 0.100                    p = 0.000 < 0.100  \n4  Dados não são descritos pela normal  Dados não são descritos pela normal  ",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Parâmetros e Interpretações</th>\n      <th>Teste de Lilliefors</th>\n      <th>Teste de Anderson-Darling</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>p-valor: probabilidade de os dados serem descr...</td>\n      <td>0.001</td>\n      <td>0.000059</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Probabilidade de seguir a normal (%)</td>\n      <td>0.1</td>\n      <td>0.005933</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>alpha</td>\n      <td>0.1</td>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Critério: não segue a normal se p &lt; alpha = 0.100</td>\n      <td>p = 0.001 &lt; 0.100</td>\n      <td>p = 0.000 &lt; 0.100</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Dados são descritos ou não pela normal?</td>\n      <td>Dados não são descritos pela normal</td>\n      <td>Dados não são descritos pela normal</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 18,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 18
        },
        {
            "cell_type": "markdown",
            "source": [
                "Normalidade dos dados de teste"
            ],
            "metadata": {
                "azdata_cell_guid": "c8936c70-7ea1-4976-874f-e6f6b998f3a1"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "normality_test"
            ],
            "metadata": {
                "azdata_cell_guid": "186d91a6-7ce8-4721-8e04-a56427f15f4b"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "                         Parâmetros e Interpretações  \\\n0  p-valor: probabilidade de os dados serem descr...   \n1               Probabilidade de seguir a normal (%)   \n2                                              alpha   \n3  Critério: não segue a normal se p < alpha = 0.100   \n4            Dados são descritos ou não pela normal?   \n\n               Teste de Lilliefors        Teste de Anderson-Darling  \n0                         0.302421                         0.292176  \n1                        30.242091                        29.217637  \n2                              0.1                              0.1  \n3               p = 0.302 >= 0.100               p = 0.292 >= 0.100  \n4  Dados são descritos pela normal  Dados são descritos pela normal  ",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Parâmetros e Interpretações</th>\n      <th>Teste de Lilliefors</th>\n      <th>Teste de Anderson-Darling</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>p-valor: probabilidade de os dados serem descr...</td>\n      <td>0.302421</td>\n      <td>0.292176</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Probabilidade de seguir a normal (%)</td>\n      <td>30.242091</td>\n      <td>29.217637</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>alpha</td>\n      <td>0.1</td>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Critério: não segue a normal se p &lt; alpha = 0.100</td>\n      <td>p = 0.302 &gt;= 0.100</td>\n      <td>p = 0.292 &gt;= 0.100</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Dados são descritos ou não pela normal?</td>\n      <td>Dados são descritos pela normal</td>\n      <td>Dados são descritos pela normal</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 19,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 19
        },
        {
            "cell_type": "markdown",
            "source": [
                "Vemos que, embora os dados de treino não possam ser descritos, os dados de teste podem ser descritos pela normal. Os conjuntos de dados parecem uma normal distorcida, como a lognormal"
            ],
            "metadata": {
                "azdata_cell_guid": "05addf94-3415-4711-9f4d-10baeb918e39"
            },
            "attachments": {}
        }
    ]
}
{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3 (ipykernel)",
            "language": "python"
        },
        "language_info": {
            "name": "python",
            "version": "3.8.10",
            "mimetype": "text/x-python",
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "pygments_lexer": "ipython3",
            "nbconvert_exporter": "python",
            "file_extension": ".py"
        },
        "celltoolbar": "Tags"
    },
    "nbformat_minor": 2,
    "nbformat": 4,
    "cells": [
        {
            "cell_type": "code",
            "source": [
                "## Análise dinâmica de dados - Gráficos de Controle estatístico de processos\n",
                "\n",
                "## CÉLULA 1: Instruções de carregamento do arquivo e bibliotecas a ser importadas\n",
                "\n",
                "\"\"\"\"\n",
                "    Para executar uma CÉLULA, pressione o botão \"Run\" no topo, com a CÉLULA selecionada, ou pressione:\n",
                "    \n",
                "    Shift + Enter\n",
                "\n",
                "-Se seus dados estiverem em um arquivo xlsx utilize a CÉLULA 2\n",
                "\n",
                "-Se seus dados estiverem em um arquivo csv contendo cabeçalhos, utilize a CÉLULA 3\n",
                "\n",
                "-Se seus dados estiverem em um arquivo csv sem cabeçalhos, utilize a CÉLULA 4\n",
                "\n",
                "-Utilize apenas a CÉLULA correta\n",
                "-Substitua o texto entre aspas na variável \"caminho\" pelo endereço do arquivo em sua máquina.\n",
                "\n",
                "EXECUTE ESTA CÉLULA ANTES DE PROSSEGUIR\n",
                "\n",
                "EXECUTE APENAS UMA CÉLULA POR VEZ\n",
                "\n",
                "-Caso deseje apagar a saída de uma célula carregada, mas não deseje carregar uma nova saída, vá à aba superior, escolha o ícone\n",
                "do teclado (open the command palette/ jupyter-notebook command group) e selecione clear cell output.\n",
                "\n",
                "@author: Marco César Prado Soares, MSc.\n",
                "Especialista Lean Six Sigma Master Black Belt, Eng. Químico, MSc. Eng. Mecatrônica (instrumentação) \n",
                "Marco.Soares@br.ey.com; marcosoares.feq@gmail.com\n",
                "\"\"\"\n",
                "import pandas as pd\n",
                "import numpy as np\n",
                "import matplotlib.pyplot as plt"
            ],
            "metadata": {
                "slideshow": {
                    "slide_type": "slide"
                },
                "tags": [
                    "CELL_1"
                ],
                "azdata_cell_guid": "b3f3a7c0-b13f-41e9-b45b-aa6a2f04925b"
            },
            "outputs": [],
            "execution_count": 1
        },
        {
            "cell_type": "code",
            "source": [
                "## CÉLULA 3: dados em arquivo csv com cabeçalho\n",
                "\n",
                "caminho = \"df_train.csv\"\n",
                "df_train = pd.read_csv(caminho)\n",
                "\n",
                "caminho = \"df_test.csv\"\n",
                "df_test = pd.read_csv(caminho)"
            ],
            "metadata": {
                "tags": [
                    "CELL_3"
                ],
                "azdata_cell_guid": "98b14ff3-70e7-43ac-ad98-2296ce14ae47"
            },
            "outputs": [],
            "execution_count": 7
        },
        {
            "cell_type": "markdown",
            "source": [
                "# CÉLULA 6: Instruções gerais para construção dos gráficos\n",
                "\n",
                "### ATENÇÃO: NÃO EXECUTE ESTA CÉLULA - Ela contém apenas texto explicativo\n",
                "\n",
                "\\-A CÉLULA 7 fornece um guia completo de qual gráfico de controle você deve escolher, dependendo do seu dado.\n",
                "\n",
                "## \\-Utilize a CÉLULA 7 ou o fluxograma ao fim desta célula para escolher o gráfico correto.\n",
                "\n",
                "Caso já saiba qual gráfico utilizar, EXECUTE EM SEQUÊNCIA AS 3 CÉLULAS CORRESPONDENTES A CADA GRÁFICO, exceto as correspondentes às instruções de uso (elas apresentam a indicação de instrução):\n",
                "\n",
                "1. GRÁFICO I-MR: CÉLULAS 8 - 10\n",
                "    \n",
                "2. GRÁFICO Xbarra-S: CÉLULAS 11 - 13\n",
                "    \n",
                "3. GRÁFICO np: CÉLULAS 14 - 16\n",
                "    \n",
                "4. GRÁFICO p: CÉLULAS 17 - 19\n",
                "    \n",
                "5. GRÁFICO u: CÉLULAS 20 - 22\n",
                "    \n",
                "6. GRÁFICO c: CÉLULAS 23 - 25\n",
                "    \n",
                "\n",
                "NOTE QUE AS CÉLULAS SÃO INDICADOS PELAS PRIMEIRAS LINHAS AZUIS DE COMENTÁRIOS\n",
                "\n",
                "* * *\n",
                "\n",
                "* * *\n",
                "\n",
                "![](attachment:image.png)"
            ],
            "metadata": {
                "tags": [
                    "CELL_6"
                ],
                "azdata_cell_guid": "9187d9bd-c75f-4218-b94a-f15f0653fa81"
            },
            "attachments": {
                "image.png": {
                    "image/png": ""
                }
            }
        },
        {
            "cell_type": "markdown",
            "source": [
                "# CÉLULA 7: GUIA DE ESCOLHA DO GRÁFICO DE CONTROLE - DADOS E DISTRIBUIÇÃO ESTATÍSTICA\n",
                "\n",
                "### ATENÇÃO: NÃO EXECUTE ESTA CÉLULA - Ela contém apenas texto explicativo\n",
                "\n",
                "Em:https://cran.r-project.org/web/packages/qicharts/vignettes/controlcharts.html#types-of-control-charts\n",
                "É possível ver bons exemplos (construídos em R) e explicações sobre os gráficos de controle.\n",
                "\n",
                "#### Referências para cálculos dos limites de controle:\n",
                "\n",
                "Thomas Pyzdek (2003). The Six Sigma Handbook. McGraw-Hill. doi: 10.1036/0071415963\n",
                "    \n",
                "Douglas C. Montgomery (2009). Introduction to Statistical Process Control, Sixth Edition, John Wiley & Sons.\n",
                "\n",
                "Lloyd P. Provost, Sandra K. Murray (2011). The Health Care Data Guide: Learning from Data for Improvement. San Francisco: John Wiley & Sons Inc.\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "##### ATENÇÃO: Os gráficos de controle discutidos neste guia não são adequados para avaliar algumas SITUAÇÕES PARTICULARES:\n",
                "    \n",
                "1) SOMA ACUMULADA: Tipicamente empregada em alguns casos de dados\n",
                "autocorrelacionados. Neste caso, a carta de controle correta é o CUSUM. \n",
                "Para verificar como construir o gráfico do CUSUM, veja:\n",
                "https://lib.dr.iastate.edu/cgi/viewcontent.cgi?article=1004&context=creativecomponents\n",
                "    \n",
                "2) Eventos EXTREMAMENTE raros ou taxas de ocorrências EXTREMAMENTE baixas\n",
                "Quando a presença de defeitos/ocorrências ou a fração/taxa de defeituosos ou itens que apresentam a ocorrência são tão raras ou baixas e o tamanho de subgrupos (amostras) é pequeno, os gráficos C, U, e P se tornam sem  utilidade prática. Isso porque a maior parte dos subgrupos não apresenta ocorrência, levando a uma interpretação errada dos limites de controle.\n",
                "\n",
                "Exemplo: se 8% dos pacientes liberados de um hospital adquirem úlcera e a média de altas semanais de um departamento pequeno é de 10 pacientes, esperaríamos, em média, menos de um caso de úlcera por semana.\n",
                "\n",
                "Em um caso como esse, ao invés de plotar o número de ocorrências por  subgrupo, o ideal é representar graficamente quantas liberações ocorrem  entre a liberação de um paciente com úlcera e a liberação do paciente  seguinte que teve úlcera.\n",
                "\n",
                "Resumindo: para casos ultrarraros, não avalie a quantidade de eventos por subgrupo, mas sim OS INTERVALOS ENTRE um evento e o seguinte, ou a QUANTIDADE DE ELEMENTOS que separam OCORRÊNCIAS RARAS consecutivas.\n",
                "\n",
                "O número de unidades entre defeituosos é modelado pela distribuição  GEOMÉTRICA, e o gráfico correto é o G.\n",
                "\n",
                "No caso de se avaliar o TEMPO entre os eventos ultrarraros, o gráfico correto é o T. \n",
                "\n",
                "Para conferir estes dois gráficos, veja:\n",
                "https://cran.r-project.org/web/packages/qicharts/vignettes/controlcharts.html#types-of-control-charts\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "## TIPO DE DADO: DADOS CONTÍNUOS\n",
                "### DISTRIBUIÇÃO ESTATÍSTICA ASSOCIADA: NORMAL\n",
                "\n",
                "→ Medem uma característica de uma parte do processo, como um comprimento, massa, temperatura, ou pH.\n",
                "→ Os dados muitas vezes incluem valores fracionados ou decimais.\n",
                "→ Os dados muitas vezes são coletados em sequência, ao longo do tempo.\n",
                "\n",
                "EXEMPLO\n",
                "\n",
                "Uma indústria alimentícia deseja investigar se a massa de cereal  por embalagem é consistente no tempo. Para investigar isso, o analista de qualidade registra as massas de caixas de cereais produzidas.\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "### DADOS NÃO ESTÃO EM SUBGRUPOS (DADOS SÃO INDIVIDUAIS)\n",
                "\n",
                "→ Apenas uma única medição ou observação é coletada a cada instante.\n",
                "\n",
                "EXEMPLO\n",
                "\n",
                "Um analista de qualidade monitora o pH em múltiplas bateladas de um detergente líquido. Como cada líquido é homogêneo, o analista precisa avaliar apenas uma amostra líquida por batelada.\n",
                "\n",
                "GRÁFICO A UTILIZAR: I-MR \n",
                "---------------------------------------------------------------------------\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "### DADOS ESTÃO EM SUBGRUPOS\n",
                "\n",
                "→ Múltiplas observações são coletadas conjuntamente, em momentos de tempo próximos.\n",
                "\n",
                "EXEMPLO\n",
                "\n",
                "Uma fábrica de autopeças monitora o diâmetro das rodas. A cada 2 horas, o inspetor coleta 5 rodas produzidas em sequência da linha de produção. Cada 5 rodas constituem, portanto, um subgrupo.\n",
                "\n",
                "-Se os subgrupos SEMPRE têm mesmo tamanho, é possível empregar o X-barra R (avaliação menos precisa da variação, pois leva em conta diferenças entre medidas (range), e não a dispersão total do subgrupo).\n",
                "\n",
                "-Tanto para o caso de os subgrupos terem tamanhos distintos ou apresentarem ou mesmos tamanhos é possível utilizar:\n",
                "\n",
                "GRÁFICO A UTILIZAR: X-barra S\n",
                "--------------------------------------------------------------------------\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "## TIPO DE DADO: DADOS DE ATRIBUTOS (CONTAGEM OU CLASSIFICAÇÃO)\n",
                "\n",
                "→ Contagem do número de itens defeituosos, número de defeitos por unidade, ou avaliação sobre a presença de uma dada característica (exemplo: é azul OU vermelho; tem risco OU não tem risco).\n",
                "→ Os dados de contagem são números inteiros. Os dados classificatórios podem ser representados como números inteiros e, em muitos casos, são binários (podem ser representados como zero ou 1).\n",
                "\n",
                "EXEMPLO\n",
                "\n",
                "Os inspetores de uma fábrica de lâmpadas desejam saber o número de lâmpadas quebradas (itens defeituosos) por lote. Para isso, os analistas selecionam vários lotes de lâmpadas (subgrupos) e analisam a quantidade de itens quebrados POR SUBGRUPO.\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "## CASO 1: DADOS DE CONTAGEM \n",
                "SITUAÇÃO CLÁSSICA: DEFEITOS POR UNIDADE\n",
                "\n",
                "→ Cada item pode apresentar mais de um defeito ou característica indesejada, por exemplo: manchas, arranhões, ou furos.\n",
                "→ Pode ser feita a contagem do número total de defeitos nos itens, ou pode ser determinada a taxa com que ocorrem defeitos.\n",
                "\n",
                "EXEMPLO\n",
                "\n",
                "O analista de qualidade de uma indústria têxtil coleta a cada hora 5 camisas da linha de produção (o subgrupo de análise) e examina os defeitos delas. Ele deve registrar o total de defeitos em todas as 5 camisas. As camisas podem apresentar mais de um defeito, por exemplo: 1 mancha e 2 furos.\n",
                "\n",
                "OUTROS EXEMPLOS TÍPICOS:\n",
                "→ NÚMERO DE INCIDENTES\n",
                "→ NÚMERO DE NÃO CONFORMIDADES\n",
                "\n",
                "### DISTRIBUIÇÃO ESTATÍSTICA ASSOCIADA: POISSON\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "### CASO 1.1: OPORTUNIDADE FIXA\n",
                "\n",
                "EXEMPLO: NÚMERO de defeitos/ocorrências POR AMOSTRA\n",
                "\n",
                "GRÁFICO A UTILIZAR: C\n",
                "--------------------------\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "## CASO 1.2: OPORTUNIDADE VARIÁVEL\n",
                "\n",
                "EXEMPLO: TAXAS, FRAÇÕES/PORCENTAGENS de defeitos/ocorrências POR AMOSTRA ou POR UNIDADE\n",
                "\n",
                "GRÁFICO A UTILIZAR: U        \n",
                "---------------------------------------\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "## CASO 2: DADOS DE CLASSIFICAÇÃO\n",
                "SITUAÇÃO CLÁSSICA: DEFEITUOSOS OU NÃO DEFEITUOSOS\n",
                "\n",
                "→ Cada item é classificado em uma de duas categorias, por exemplo: rejeitado ou aceito; defeituoso ou não defeituoso.\n",
                "→ Pode ser feita a contagem do número de itens defeituosos, ou pode ser determinada a proporção ou porcentagem de defeituosos.\n",
                "\n",
                "EXEMPLO\n",
                "\n",
                "Um processo de inspeção automatizado examina os parafusos de uma fábrica para encontrar rachaduras ou falhas severas que impossibilitem os parafusos de serem utilizados. Para cada subgrupo de parafusos coletados para análise, o analista de qualidade deve registrar o total de parafusos que foram inspecionados e qual o total de parafusos rejeitados.\n",
                "\n",
                "OUTROS EXEMPLOS TÍPICOS:\n",
                "→ ITENS COM OU SEM DEFEITO\n",
                "→ CONFORME OU NÃO CONFORME OS REQUISITOS DE QUALIDADE\n",
                "\n",
                "### DISTRIBUIÇÃO ESTATÍSTICA (TIPICAMENTE) ASSOCIADA: BINOMIAL\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "### CASO 2.1: OPORTUNIDADE FIXA / TAMANHO FIXO DE SUBGRUPO \n",
                "(TAMANHO NUMÉRICO/ QUANTIDADE DE ITENS POR SUBGRUPO)\n",
                "\n",
                "EXEMPLO: NÚMERO de itens CLASSIFICADOS como defeituosos ou de acordo com os requisitos de qualidade\n",
                "\n",
                "GRÁFICO A UTILIZAR: np\n",
                "--------------------------\n",
                "\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "_______________________________________________________________________________________________________________________________\n",
                "\n",
                "### CASO 2.2: TAMANHO VARIÁVEL DE SUBGRUPO\n",
                "\n",
                "EXEMPLO: TAXAS, FRAÇÕES ou PORCENTAGENS de itens CLASSIFICADOS como defeituosos ou de acordo com os requisitos de qualidade\n",
                "\n",
                "GRÁFICO A UTILIZAR: p\n",
                "--------------------------"
            ],
            "metadata": {
                "tags": [
                    "CELL_7"
                ],
                "azdata_cell_guid": "fb7d2d53-e192-4b94-95db-7bf85c5a102f"
            }
        },
        {
            "cell_type": "code",
            "source": [
                "## CÉLULA 8: Função do gráfico I-MR\n",
                "\n",
                "## Execute esta CÉLULA para carregar a função\n",
                "\n",
                "def i_mr(x, y, tag_x = None, lim_especificacao = None, legenda_dos_dados = None, titulo_x = None, titulo_y = None):\n",
                "\n",
                "    import pandas as pd\n",
                "    import matplotlib.pyplot as plt\n",
                "    import numpy as np\n",
                "    \n",
                "    mR = []\n",
                "    n_measurements = len(y)\n",
                "    #number of measurements: total de dados individuais coletados\n",
                "\n",
                "    \"\"\"CONTROL LIMIT EQUATIONS:\n",
                "    X-bar = (sum of measurements)/(number of measurements)\n",
                "    R = Absolute value of [(largest in subgroup) - (lowest in subgroup)]\n",
                "    Individual chart: subgroup = 1\n",
                "    R = Absolute value of [(data) - (next data)]\n",
                "    R-bar = (sum of ranges R)/(number of R values calculated)\n",
                "    Lower control limit (LCL) = X-bar - (2.66)R-bar\n",
                "    Upper control limit (UCL) = X-bar + (2.66)R-bar\n",
                "    \"\"\" \n",
                "    \n",
                "    if not (titulo_x is None):\n",
                "        x_label = titulo_x\n",
                "    \n",
                "    else:\n",
                "        x_label = \"X: Individual Measurements\"\n",
                "    \n",
                "    if not (titulo_y is None):\n",
                "        y_label = titulo_y\n",
                "    \n",
                "    else:\n",
                "        y_label = \"Y: Value\"\n",
                "    \n",
                "    if not (lim_especificacao is None):\n",
                "        #apenas roda caso o valor de lim_especificacao nao seja nulo\n",
                "        lsl = lim_especificacao[0]\n",
                "        #lower specification limit: primeiro elemento da lista\n",
                "        usl = lim_especificacao[1]\n",
                "        #upper specification limit: segundo elemento da lista\n",
                "        in_or_out_spec = []\n",
                "        #armazenara se esta dentro ou fora dos limites de especificacao\n",
                "    \n",
                "    if (tag_x is None):\n",
                "        #padrao, caso em que nao ha tag temporal\n",
                "        \n",
                "        # Construir os moving ranges\n",
                "        i = 1\n",
                "        mR.append(0) \n",
                "        #criar primeiro elemento para tornar possivel criar dataframe de saida\n",
                "        \n",
                "        while (i < n_measurements):\n",
                "            #chega a no maximo (data_total-1), o ultimo indice\n",
                "            moving_range = y[i] - y[i-1]\n",
                "            #deve ser considerado o valor absoluto da diferenca\n",
                "            moving_range = abs(moving_range)\n",
                "            mR.append(moving_range)\n",
                "            #a lista mR armazena os moving ranges\n",
                "            i = i + 1\n",
                "        \n",
                "        y_barra = y.mean()\n",
                "        #valor medio da variavel y\n",
                "        r_barra = np.average(mR)\n",
                "        \n",
                "        #limite inferior de controle - lower control limit:\n",
                "        lcl = y_barra - (2.66)*(r_barra)\n",
                "        #limite superior de controle - upper control limit:\n",
                "        ucl = y_barra + (2.66)*(r_barra)\n",
                "    \n",
                "        #criar dataframe de saida e mensagens de aviso caso algum elemento\n",
                "        #esteja fora dos limites de controle\n",
                "        yb = []\n",
                "        rb = []\n",
                "        inf_cl = []\n",
                "        sup_cl = []\n",
                "        in_or_out = []\n",
                "        #armazenara se esta dentro ou fora dos limites\n",
                "        \n",
                "        i = 0\n",
                "        while (i < n_measurements):\n",
                "           yb.append(y_barra)\n",
                "           rb.append(r_barra)\n",
                "           inf_cl.append(lcl)\n",
                "           sup_cl.append(ucl)\n",
                "           \n",
                "           if (y[i] > ucl) or (y[i] < lcl):\n",
                "               in_or_out.append(\"Out of Control Limits!\")\n",
                "               print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x[i], y[i]))\n",
                "               \n",
                "           else:\n",
                "               in_or_out.append(\"In Control Limits\")\n",
                "               \n",
                "           if not (lim_especificacao is None):\n",
                "               #checagem apenas quando houver especificacoes\n",
                "               \n",
                "               if (y[i] > usl) or (y[i] < lsl):\n",
                "                   in_or_out_spec.append(\"Out of Specification Limits!\")\n",
                "                   print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x[i], y[i]))\n",
                "               \n",
                "               else:\n",
                "                   in_or_out_spec.append(\"In Specification Limits\")\n",
                "               \n",
                "           i = i + 1\n",
                "        \n",
                "        string = 'Mean %s' %(y_label)\n",
                "        #%s indica que e incluida uma string \n",
                "        \n",
                "        if not (lim_especificacao is None):\n",
                "            d = {x_label: x, y_label: y, 'Moving Range': mR, \n",
                "                 string: yb, 'Mean Range': rb, 'Lower Control Limit': inf_cl,\n",
                "                 'Upper Control Limit': sup_cl, \n",
                "                 'Measurement: in or out of Control Limits?': in_or_out,\n",
                "                 'Measurement: in or out of Specification Limits?': in_or_out_spec}\n",
                "            \n",
                "        else:    \n",
                "            d = {x_label: x, y_label: y, 'Moving Range': mR, \n",
                "                 string: yb, 'Mean Range': rb, 'Lower Control Limit': inf_cl,\n",
                "                 'Upper Control Limit': sup_cl, \n",
                "                 'Measurement: in or out of Control Limits?': in_or_out}\n",
                "            \n",
                "        control_chart_table_I_MR = pd.DataFrame(data = d)\n",
                "        #Cria uma tabela de saida com os dados do gráfico\n",
                "            \n",
                "        # Criar gráfico de individuais\n",
                "        fig, ax = plt.subplots()\n",
                "        #e possivel criar os subplots ax[0], ax[1], etc, com o mesmo eixo x\n",
                "        #para isso, substitua o parenteses por (1, figsize=(15,15), sharex=True)\n",
                "        #sharex = True indicara o mesmo eixo X\n",
                "        #o numero 2 indica 2 subplots, 3, indicaria 3 subplots, etc\n",
                "                    \n",
                "        # Grafico de individuais\n",
                "        ax.plot(x, y, linestyle='-', marker='o', color='black', label = 'Data')\n",
                "        #dados: pontos ligados por splines retas\n",
                "        ax.axhline(y_barra, color='blue', label = 'Mean')\n",
                "        #linha media\n",
                "        ax.axhline(ucl, color = 'red', linestyle = 'dashed', label = 'Control\\nlimits')\n",
                "        #limite superior de controle\n",
                "        ax.axhline(lcl, color = 'red', linestyle = 'dashed')\n",
                "        #limite inferior de controle\n",
                "                    \n",
                "        #adicionar limites de especificacao, caso existam:\n",
                "        if not (lim_especificacao is None):\n",
                "            #limite superior de especificacao:\n",
                "            ax.axhline(usl, color = 'green', linestyle = 'dashed', label = 'Specification\\nlimits')\n",
                "            #limite inferior de especificacao:\n",
                "            ax.axhline(lsl, color = 'green', linestyle = 'dashed')\n",
                "                \n",
                "        ax.set_title('Individual - Moving Range Control Chart - I-MR')\n",
                "        ax.set(xlabel=x_label, ylabel=y_label)\n",
                "        ax.grid(True) #mude para False, caso não deseje ver as linhas de grade\n",
                "                    \n",
                "        ax.legend()\n",
                "        plt.show()\n",
                "                \n",
                "        return control_chart_table_I_MR\n",
                "    \n",
                "    else:\n",
                "        \n",
                "        tag = tag_x[0] #primeira posicao\n",
                "        #alem da serie do mR, precisamos de outras series que armazenarao\n",
                "        #Os limites de controle e medias\n",
                "        \n",
                "        #vamos encontrar os indices nos quais ocorrem as mudancas de tags\n",
                "        #e quebrar em varios arrays de acordo com as tags\n",
                "        \n",
                "        indices_of_tags = []\n",
                "        #lista dos indices de troca de array\n",
                "        #sao os indices em que ocorre mudanca de tag temporal\n",
                "        \n",
                "        i = 1\n",
                "        while (i < n_measurements):\n",
                "            \n",
                "            if (i > (n_measurements-1)):\n",
                "                    \n",
                "                #Esta restricao extra impede que se acesse um indice\n",
                "                #i inexistente\n",
                "                break\n",
                "        \n",
                "            if (tag != tag_x[i]):\n",
                "                \n",
                "                indices_of_tags.append(i)\n",
                "                #grava o indice da mudanca de tag\n",
                "                #este indice indicara onde quebrar em arrays\n",
                "                tag = tag_x[i]\n",
                "                \n",
                "            i = i + 1    \n",
                "        \n",
                "        #total de splits/tags\n",
                "        #se a lista indices_of_tags possui apenas um elemento, significa\n",
                "        #que temos 2 splits (2 tags diferentes)\n",
                "        #se existem 2 elementos, temos 3 tags diferentes\n",
                "        #logo, o numero de tags = total de elementos da lista \n",
                "        #indices_of_tags + 1\n",
                "        \n",
                "        n_tags = len(indices_of_tags) + 1\n",
                "        #variavel que armazena o total de tags/splits das listas originais\n",
                "        \n",
                "        #CHECAR CONDICOES: O GRÁFICO NAO PODE SER GERADO SE n_tags = 1 ou\n",
                "        #n_tags >=4. Nestas condicoes, a mensagem de erro seria gerada\n",
                "        #pois o gráfico usa variaveis locais criadas para cada condicao\n",
                "        \n",
                "        if (n_tags == 1):\n",
                "            print(\"\\n\") #\\n = quebra de linha\n",
                "            print (\"Error! You do not have to input the tags, since all tags are equal!\\n\")\n",
                "            print (\"Keep tag_x = None\\n\")\n",
                "        \n",
                "        if (n_tags > 4):\n",
                "            print(\"\\n\") #\\n = quebra de linha\n",
                "            print(\"Error! Too much tags!\\n\")\n",
                "            print(\"1) If you are inputing 2 to 4 tags, please verify if they are grouped before calling the function. This function requires that the tags are grouped: data must be input in blocks of same tags,so the list can be splitted and analyzed. If the tags are randomly distributed in relation to the tags, please group the data in terms of tags, so the code may break the list and analyze the different tags separately. If it is not possible, keep tag_x = None\\n\")\n",
                "            print(\"2) Use less tags or  go to the function and replicate the code to adapt it to your needs.\\n\")\n",
                "            print(\"3) You must create a number of arrays that is equal to the number of tags, and then you may replicate the code.\\n\")\n",
                "            print(\"Example: if you have 5 tags, you must declare x1, x2, x3, x4, x5 = ...\")\n",
                "            print(\"y1, y2, y3, y4, y5 = ... \\n\")\n",
                "            print(\"4) Finally, you must replicate the code so all of the new splitted arrays can be properly analyzed.\\n\")\n",
                "            print(\"5) Do not forget to copy all of the loops from 'i = 1 while (i < size1): to else: in_or_out_spec4.append\\n\")\n",
                "            print(\"6) Create a new loop for each new tag. Example: if you want to analyze 6 different tags, your data is divided into 6 subgroups. So, the code will require a total of 6 loops and, therefore, you should create 2 more loops.\\n\")\n",
                "            print(\"7) Alternatively, you may create a function for your particular case. Instead of assessing the quantity of indices, you may simply provide a list with the indices of tags: [index1, index2, ...]\\n\")\n",
                "            print(\"8) Pay attention to the steps that you must copy for each new array.\\n\")\n",
                "            print(\"9) Then simply change the indices - e.g. x1 turns to x5, mR1 to mR5, etc. Do not forget the steps of concatenation.\\n\")\n",
                "            print(\"10) In the concatenation steps, you must add the new arrays: y5, etc, accordingly to the number of extra tags that you created.\\n\")\n",
                "            print(\"11) TIP: Only use tags if there is a fundamental modification of the process, condition, stage, or methodology for collecting the data.\\n\")\n",
                "            print(\"It may include different operators, test of process or experimental modification, turn shift, etc.\\n\")\n",
                "            print(\"In other cases, like when the tags are simply the collection time, you may input then as the x axis, or simply keep tag_x = None\\n\")\n",
                "            print(\"12) TIP: each new array will have a loop starting from 1, for evaluating the moving range and control limits, and a second loop starting from zero, which verifies if there are data out of control or specification limits.\\n\")\n",
                "            print(\"13) Do not concatenate the X-series, which may contain dates and time. The numpy function concatenate cannot be used for date and time data. On the other hand, since these data are not manipulated, we just have to retrieve the original information.\\n\")\n",
                "            \n",
                "        if (2 <= n_tags <= 4): \n",
                "            \n",
                "            \"\"\"\n",
                "            Vamos primeiro quebrar os valores de acordo com as tags\n",
                "            Para isso, usamos a função numpy.array_split(ary, indices_or_sections) \n",
                "            que quebra a lista ou array 'ary' nas posições indicadas na lista \n",
                "            'indices_or_sections'. A função numpy.split não pode ser usada, pois ela \n",
                "            apenas permite quebra se a lista 'ary' for dividida em sublistas de mesmo\n",
                "            tamanho.\n",
                "            \n",
                "            Ao fim, reconcatemos as listas usando a função \n",
                "            numpy.concatenate((y1, y2, ...), axis=None) que junta as listas em um novo\n",
                "            array.\n",
                "            \n",
                "            Esta função, porém, também tem uma limitação: ela não permite concatenar datas\n",
                "            ou horas, que podem constituir o eixo X de uma série temporal.\n",
                "            (Esta limitação não existe quando se trata de variáveis float ou strings)\n",
                "            \n",
                "            Porém, na etapa final, nao precisamos nos preocupar. Como a variavel x\n",
                "            não é manipulada, basta tomar o x original (ela porém é separada\n",
                "            para indicar os valores corretos na avaliação de se o ponto esta\n",
                "            dentro dos limites). O mesmo é feito com as tags, evitando que a\n",
                "            presença de hora/data comprometa o código.\n",
                "            \n",
                "            O X apenas é dividido para permitir a aferição do ponto que passa\n",
                "            dos limites de controle ou especificação. Como não há informação\n",
                "            obtida pela divisão das tags, elas não são divididas.\n",
                "            \n",
                "            \"\"\"\n",
                "            \n",
                "            if (n_tags == 2):\n",
                "                #temos dois subgrupos\n",
                "                #Se existem 2 tags (1 ponto de quebra), a serie e dividida em 2 subgrupos\n",
                "                x1, x2 = np.array_split(ary = x, indices_or_sections = indices_of_tags, axis=0)\n",
                "                y1, y2 = np.split(ary = y, indices_or_sections = indices_of_tags, axis=0)\n",
                "\n",
                "                #Colocar todos os indices de listas comecando em zero:\n",
                "                #embora o objeto a direita, np.split, seja um conjunto de numpy arrays\n",
                "                #as variaveis chamadas a esquerda sao listas. Logo, seguem aa funcao\n",
                "                #reset_index, e nao as funcoes numpy de manipulacao de arrays\n",
                "                x1 = x1.reset_index(drop=True)\n",
                "                x2 = x2.reset_index(drop=True)\n",
                "                y1 = y1.reset_index(drop=True)\n",
                "                y2 = y2.reset_index(drop=True)\n",
                "                \n",
                "                mR1 = []\n",
                "                mR2 = []\n",
                "                size1 = len(y1)\n",
                "                size2 = len(y2)\n",
                "                y_barra1 = np.average(y1)\n",
                "                y_barra2 = np.average(y2)\n",
                "                mR1.append(0)\n",
                "                mR2.append(0)\n",
                "                \n",
                "                #a funcao .mean() nao pode ser usada em series e arrays.\n",
                "                #neste caso, usa-se a funcao np.average()\n",
                "                \n",
                "                if not (lim_especificacao is None):\n",
                "                   #checagem apenas quando houver especificacoes\n",
                "                   in_or_out_spec1 = []\n",
                "                   in_or_out_spec2 = []\n",
                "                   \n",
                "                i = 1\n",
                "                while (i < size1):\n",
                "                    moving_range = y1[i] - y1[i-1]\n",
                "                    #deve ser considerado o valor absoluto da diferenca\n",
                "                    moving_range = abs(moving_range)\n",
                "                    mR1.append(moving_range)\n",
                "                    #a lista mR armazena os moving ranges\n",
                "                    i = i + 1\n",
                "                \n",
                "                r_barra1 = np.average(mR1)\n",
                "                lcl1 = y_barra1 - (2.66)*(r_barra1)\n",
                "                ucl1 = y_barra1 + (2.66)*(r_barra1)\n",
                "                \n",
                "                yb1 = []\n",
                "                rb1 = []\n",
                "                inf_cl1 = []\n",
                "                sup_cl1 = []\n",
                "                in_or_out1 = []\n",
                "                #armazenara se esta dentro ou fora dos limites\n",
                "                \n",
                "                i = 0\n",
                "                while (i < size1):\n",
                "                   yb1.append(y_barra1)\n",
                "                   rb1.append(r_barra1)\n",
                "                   inf_cl1.append(lcl1)\n",
                "                   sup_cl1.append(ucl1)\n",
                "                   \n",
                "                   if (y1[i] > ucl1) or (y1[i] < lcl1):\n",
                "                       in_or_out1.append(\"Out of Control Limits!\")\n",
                "                       print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x1[i], y1[i]))\n",
                "                       \n",
                "                   else:\n",
                "                       in_or_out1.append(\"In Control Limits\")\n",
                "                   \n",
                "                   if not (lim_especificacao is None):\n",
                "                   \n",
                "                       if (y1[i] > usl) or (y1[i] < lsl):\n",
                "                           in_or_out_spec1.append(\"Out of Specification Limits!\")\n",
                "                           print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x1[i], y1[i]))\n",
                "                       \n",
                "                       else:\n",
                "                           in_or_out_spec1.append(\"In Specification Limits\") \n",
                "                   \n",
                "                   i = i + 1\n",
                "                \n",
                "                i = 1\n",
                "                while (i < size2):\n",
                "                    moving_range = y2[i] - y2[i-1]\n",
                "                    #deve ser considerado o valor absoluto da diferenca\n",
                "                    moving_range = abs(moving_range)\n",
                "                    mR2.append(moving_range)\n",
                "                    #a lista mR armazena os moving ranges\n",
                "                    i = i + 1\n",
                "                \n",
                "                r_barra2 = np.average(mR2)\n",
                "                lcl2 = y_barra2 - (2.66)*(r_barra2)\n",
                "                ucl2 = y_barra2 + (2.66)*(r_barra2)\n",
                "                \n",
                "                yb2 = []\n",
                "                rb2 = []\n",
                "                inf_cl2 = []\n",
                "                sup_cl2 = []\n",
                "                in_or_out2 = []\n",
                "                #armazenara se esta dentro ou fora dos limites\n",
                "                \n",
                "                i = 0\n",
                "                while (i < size2):\n",
                "                   yb2.append(y_barra2)\n",
                "                   rb2.append(r_barra2)\n",
                "                   inf_cl2.append(lcl2)\n",
                "                   sup_cl2.append(ucl2)\n",
                "                   \n",
                "                   if (y2[i] > ucl2) or (y2[i] < lcl2):\n",
                "                       in_or_out2.append(\"Out of Control Limits!\")\n",
                "                       print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x2[i], y2[i]))\n",
                "                       \n",
                "                   else:\n",
                "                       in_or_out2.append(\"In Control Limits\")\n",
                "                   \n",
                "                   if not (lim_especificacao is None):\n",
                "                   \n",
                "                       if (y2[i] > usl) or (y2[i] < lsl):\n",
                "                           in_or_out_spec2.append(\"Out of Specification Limits!\")\n",
                "                           print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x2[i], y2[i]))\n",
                "                       \n",
                "                       else:\n",
                "                           in_or_out_spec2.append(\"In Specification Limits\") \n",
                "                   \n",
                "                   i = i + 1\n",
                "                \n",
                "                y = np.concatenate((y1, y2), axis=None)\n",
                "                mR = np.concatenate((mR1, mR2), axis=None)\n",
                "                yb = np.concatenate((yb1, yb2), axis=None)\n",
                "                rb = np.concatenate((rb1, rb2), axis=None)\n",
                "                inf_cl = np.concatenate((inf_cl1, inf_cl2), axis=None)\n",
                "                sup_cl = np.concatenate((sup_cl1, sup_cl2), axis=None)\n",
                "                in_or_out = np.concatenate((in_or_out1, in_or_out2), axis=None)\n",
                "                \n",
                "                if not (lim_especificacao is None):\n",
                "                    in_or_out_spec = np.concatenate((in_or_out_spec1, in_or_out_spec2), axis=None)\n",
                "            \n",
                "            if (n_tags == 3):\n",
                "                #dados divididos em 3 subgrupos\n",
                "                x1, x2, x3 = np.split(ary = x, indices_or_sections = indices_of_tags, axis=0)\n",
                "                y1, y2, y3 = np.split(ary = y, indices_or_sections = indices_of_tags, axis=0)\n",
                "                \n",
                "                x1 = x1.reset_index(drop=True)\n",
                "                x2 = x2.reset_index(drop=True)\n",
                "                x3 = x3.reset_index(drop=True)\n",
                "                y1 = y1.reset_index(drop=True)\n",
                "                y2 = y2.reset_index(drop=True)\n",
                "                y3 = y3.reset_index(drop=True)\n",
                "                \n",
                "                mR1 = []\n",
                "                mR2 = []\n",
                "                mR3 = []\n",
                "                size1 = len(y1)\n",
                "                size2 = len(y2)\n",
                "                size3 = len(y3)\n",
                "                y_barra1 = np.average(y1)\n",
                "                y_barra2 = np.average(y2)\n",
                "                y_barra3 = np.average(y3)\n",
                "                mR1.append(0)\n",
                "                mR2.append(0)\n",
                "                mR3.append(0)\n",
                "                \n",
                "                if not (lim_especificacao is None):\n",
                "                   #checagem apenas quando houver especificacoes\n",
                "                   in_or_out_spec1 = []\n",
                "                   in_or_out_spec2 = []\n",
                "                   in_or_out_spec3 = []\n",
                "            \n",
                "                i = 1\n",
                "                while (i < size1):\n",
                "                    moving_range = y1[i] - y1[i-1]\n",
                "                    #deve ser considerado o valor absoluto da diferenca\n",
                "                    moving_range = abs(moving_range)\n",
                "                    mR1.append(moving_range)\n",
                "                    #a lista mR armazena os moving ranges\n",
                "                    i = i + 1\n",
                "                \n",
                "                r_barra1 = np.average(mR1)\n",
                "                lcl1 = y_barra1 - (2.66)*(r_barra1)\n",
                "                ucl1 = y_barra1 + (2.66)*(r_barra1)\n",
                "                \n",
                "                yb1 = []\n",
                "                rb1 = []\n",
                "                inf_cl1 = []\n",
                "                sup_cl1 = []\n",
                "                in_or_out1 = []\n",
                "                #armazenara se esta dentro ou fora dos limites\n",
                "                \n",
                "                i = 0\n",
                "                while (i < size1):\n",
                "                   yb1.append(y_barra1)\n",
                "                   rb1.append(r_barra1)\n",
                "                   inf_cl1.append(lcl1)\n",
                "                   sup_cl1.append(ucl1)\n",
                "                   \n",
                "                   if (y1[i] > ucl1) or (y1[i] < lcl1):\n",
                "                       in_or_out1.append(\"Out of Control Limits!\")\n",
                "                       print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x1[i], y1[i]))\n",
                "                       \n",
                "                   else:\n",
                "                       in_or_out1.append(\"In Control Limits\")\n",
                "                   \n",
                "                   if not (lim_especificacao is None):\n",
                "                   \n",
                "                       if (y1[i] > usl) or (y1[i] < lsl):\n",
                "                           in_or_out_spec1.append(\"Out of Specification Limits!\")\n",
                "                           print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x1[i], y1[i]))\n",
                "                       \n",
                "                       else:\n",
                "                           in_or_out_spec1.append(\"In Specification Limits\") \n",
                "                   \n",
                "                   i = i + 1\n",
                "                \n",
                "                i = 1\n",
                "                while (i < size2):\n",
                "                    moving_range = y2[i] - y2[i-1]\n",
                "                    #deve ser considerado o valor absoluto da diferenca\n",
                "                    moving_range = abs(moving_range)\n",
                "                    mR2.append(moving_range)\n",
                "                    #a lista mR armazena os moving ranges\n",
                "                    i = i + 1\n",
                "                \n",
                "                r_barra2 = np.average(mR2)\n",
                "                lcl2 = y_barra2 - (2.66)*(r_barra2)\n",
                "                ucl2 = y_barra2 + (2.66)*(r_barra2)\n",
                "                \n",
                "                yb2 = []\n",
                "                rb2 = []\n",
                "                inf_cl2 = []\n",
                "                sup_cl2 = []\n",
                "                in_or_out2 = []\n",
                "                #armazenara se esta dentro ou fora dos limites\n",
                "                \n",
                "                i = 0\n",
                "                while (i < size2):\n",
                "                   yb2.append(y_barra2)\n",
                "                   rb2.append(r_barra2)\n",
                "                   inf_cl2.append(lcl2)\n",
                "                   sup_cl2.append(ucl2)\n",
                "                   \n",
                "                   if (y2[i] > ucl2) or (y2[i] < lcl2):\n",
                "                       in_or_out2.append(\"Out of Control Limits!\")\n",
                "                       print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x2[i], y2[i]))\n",
                "                       \n",
                "                   else:\n",
                "                       in_or_out2.append(\"In Control Limits\")\n",
                "                   \n",
                "                   if not (lim_especificacao is None):\n",
                "                   \n",
                "                       if (y2[i] > usl) or (y2[i] < lsl):\n",
                "                           in_or_out_spec2.append(\"Out of Specification Limits!\")\n",
                "                           print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x2[i], y2[i]))\n",
                "                       \n",
                "                       else:\n",
                "                           in_or_out_spec2.append(\"In Specification Limits\") \n",
                "                   \n",
                "                   i = i + 1\n",
                "                \n",
                "                i = 1\n",
                "                while (i < size3):\n",
                "                    moving_range = y3[i] - y3[i-1]\n",
                "                    #deve ser considerado o valor absoluto da diferenca\n",
                "                    moving_range = abs(moving_range)\n",
                "                    mR3.append(moving_range)\n",
                "                    #a lista mR armazena os moving ranges\n",
                "                    i = i + 1\n",
                "                \n",
                "                r_barra3 = np.average(mR3)\n",
                "                lcl3 = y_barra3 - (2.66)*(r_barra3)\n",
                "                ucl3 = y_barra3 + (2.66)*(r_barra3)\n",
                "                \n",
                "                yb3 = []\n",
                "                rb3 = []\n",
                "                inf_cl3 = []\n",
                "                sup_cl3 = []\n",
                "                in_or_out3 = []\n",
                "                #armazenara se esta dentro ou fora dos limites\n",
                "                \n",
                "                i = 0\n",
                "                while (i < size3):\n",
                "                   yb3.append(y_barra3)\n",
                "                   rb3.append(r_barra3)\n",
                "                   inf_cl3.append(lcl3)\n",
                "                   sup_cl3.append(ucl3)\n",
                "                   \n",
                "                   if (y3[i] > ucl3) or (y3[i] < lcl3):\n",
                "                       in_or_out3.append(\"Out of Control Limits!\")\n",
                "                       print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x3[i], y3[i]))\n",
                "                       \n",
                "                   else:\n",
                "                       in_or_out3.append(\"In Control Limits\")\n",
                "                   \n",
                "                   if not (lim_especificacao is None):\n",
                "                   \n",
                "                       if (y3[i] > usl) or (y3[i] < lsl):\n",
                "                           in_or_out_spec3.append(\"Out of Specification Limits!\")\n",
                "                           print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x3[i], y3[i]))\n",
                "                       \n",
                "                       else:\n",
                "                           in_or_out_spec3.append(\"In Specification Limits\") \n",
                "                   \n",
                "                   i = i + 1\n",
                "                \n",
                "                y = np.concatenate((y1, y2, y3), axis=None)\n",
                "                mR = np.concatenate((mR1, mR2, mR3), axis=None)\n",
                "                yb = np.concatenate((yb1, yb2, yb3), axis=None)\n",
                "                rb = np.concatenate((rb1, rb2, rb3), axis=None)\n",
                "                inf_cl = np.concatenate((inf_cl1, inf_cl2, inf_cl3), axis=None)\n",
                "                sup_cl = np.concatenate((sup_cl1, sup_cl2, sup_cl3), axis=None)\n",
                "                in_or_out = np.concatenate((in_or_out1, in_or_out2, in_or_out3), axis=None)\n",
                "                \n",
                "                if not (lim_especificacao is None):\n",
                "                    in_or_out_spec = np.concatenate((in_or_out_spec1, in_or_out_spec2, in_or_out_spec3), axis=None)\n",
                "                  \n",
                "            if (n_tags == 4):\n",
                "                #se temos 4 subdivisoes\n",
                "                x1, x2, x3, x4 = np.split(ary = x, indices_or_sections = indices_of_tags, axis=0)\n",
                "                y1, y2, y3, y4 = np.split(ary = y, indices_or_sections = indices_of_tags, axis=0)\n",
                "                                \n",
                "                x1 = x1.reset_index(drop=True)\n",
                "                x2 = x2.reset_index(drop=True)\n",
                "                x3 = x3.reset_index(drop=True)\n",
                "                x4 = x4.reset_index(drop=True)\n",
                "                y1 = y1.reset_index(drop=True)\n",
                "                y2 = y2.reset_index(drop=True)\n",
                "                y3 = y3.reset_index(drop=True)\n",
                "                y4 = y4.reset_index(drop=True)\n",
                "                \n",
                "                mR1 = []\n",
                "                mR2 = []\n",
                "                mR3 = []\n",
                "                mR4 = []\n",
                "                size1 = len(y1)\n",
                "                size2 = len(y2)\n",
                "                size3 = len(y3)\n",
                "                size4 = len(y4)\n",
                "                y_barra1 = np.average(y1)\n",
                "                y_barra2 = np.average(y2)\n",
                "                y_barra3 = np.average(y3)\n",
                "                y_barra4 = np.average(y4)\n",
                "                mR1.append(0)\n",
                "                mR2.append(0)\n",
                "                mR3.append(0)\n",
                "                mR4.append(0)\n",
                "                \n",
                "                if not (lim_especificacao is None):\n",
                "                   #checagem apenas quando houver especificacoes\n",
                "                   in_or_out_spec1 = []\n",
                "                   in_or_out_spec2 = []\n",
                "                   in_or_out_spec3 = []\n",
                "                   in_or_out_spec4 = []\n",
                "            \n",
                "                i = 1\n",
                "                while (i < size1):\n",
                "                    moving_range = y1[i] - y1[i-1]\n",
                "                    #deve ser considerado o valor absoluto da diferenca\n",
                "                    moving_range = abs(moving_range)\n",
                "                    mR1.append(moving_range)\n",
                "                    #a lista mR armazena os moving ranges\n",
                "                    i = i + 1\n",
                "                \n",
                "                r_barra1 = np.average(mR1)\n",
                "                lcl1 = y_barra1 - (2.66)*(r_barra1)\n",
                "                ucl1 = y_barra1 + (2.66)*(r_barra1)\n",
                "                \n",
                "                yb1 = []\n",
                "                rb1 = []\n",
                "                inf_cl1 = []\n",
                "                sup_cl1 = []\n",
                "                in_or_out1 = []\n",
                "                #armazenara se esta dentro ou fora dos limites\n",
                "                \n",
                "                i = 0\n",
                "                while (i < size1):\n",
                "                   yb1.append(y_barra1)\n",
                "                   rb1.append(r_barra1)\n",
                "                   inf_cl1.append(lcl1)\n",
                "                   sup_cl1.append(ucl1)\n",
                "                   \n",
                "                   if (y1[i] > ucl1) or (y1[i] < lcl1):\n",
                "                       in_or_out1.append(\"Out of Control Limits!\")\n",
                "                       print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x1[i], y1[i]))\n",
                "                       \n",
                "                   else:\n",
                "                       in_or_out1.append(\"In Control Limits\")\n",
                "                   \n",
                "                   if not (lim_especificacao is None):\n",
                "                   \n",
                "                       if (y1[i] > usl) or (y1[i] < lsl):\n",
                "                           in_or_out_spec1.append(\"Out of Specification Limits!\")\n",
                "                           print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x1[i], y1[i]))\n",
                "                       \n",
                "                       else:\n",
                "                           in_or_out_spec1.append(\"In Specification Limits\") \n",
                "                   \n",
                "                   i = i + 1\n",
                "                \n",
                "                i = 1\n",
                "                while (i < size2):\n",
                "                    moving_range = y2[i] - y2[i-1]\n",
                "                    #deve ser considerado o valor absoluto da diferenca\n",
                "                    moving_range = abs(moving_range)\n",
                "                    mR2.append(moving_range)\n",
                "                    #a lista mR armazena os moving ranges\n",
                "                    i = i + 1\n",
                "                \n",
                "                r_barra2 = np.average(mR2)\n",
                "                lcl2 = y_barra2 - (2.66)*(r_barra2)\n",
                "                ucl2 = y_barra2 + (2.66)*(r_barra2)\n",
                "                \n",
                "                yb2 = []\n",
                "                rb2 = []\n",
                "                inf_cl2 = []\n",
                "                sup_cl2 = []\n",
                "                in_or_out2 = []\n",
                "                #armazenara se esta dentro ou fora dos limites\n",
                "                \n",
                "                i = 0\n",
                "                while (i < size2):\n",
                "                   yb2.append(y_barra2)\n",
                "                   rb2.append(r_barra2)\n",
                "                   inf_cl2.append(lcl2)\n",
                "                   sup_cl2.append(ucl2)\n",
                "                   \n",
                "                   if (y2[i] > ucl2) or (y2[i] < lcl2):\n",
                "                       in_or_out2.append(\"Out of Control Limits!\")\n",
                "                       print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x2[i], y2[i]))\n",
                "                       \n",
                "                   else:\n",
                "                       in_or_out2.append(\"In Control Limits\")\n",
                "                   \n",
                "                   if not (lim_especificacao is None):\n",
                "                   \n",
                "                       if (y2[i] > usl) or (y2[i] < lsl):\n",
                "                           in_or_out_spec2.append(\"Out of Specification Limits!\")\n",
                "                           print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x2[i], y2[i]))\n",
                "                       \n",
                "                       else:\n",
                "                           in_or_out_spec2.append(\"In Specification Limits\") \n",
                "                   \n",
                "                   i = i + 1\n",
                "                \n",
                "                i = 1\n",
                "                while (i < size3):\n",
                "                    moving_range = y3[i] - y3[i-1]\n",
                "                    #deve ser considerado o valor absoluto da diferenca\n",
                "                    moving_range = abs(moving_range)\n",
                "                    mR3.append(moving_range)\n",
                "                    #a lista mR armazena os moving ranges\n",
                "                    i = i + 1\n",
                "                \n",
                "                r_barra3 = np.average(mR3)\n",
                "                lcl3 = y_barra3 - (2.66)*(r_barra3)\n",
                "                ucl3 = y_barra3 + (2.66)*(r_barra3)\n",
                "                \n",
                "                yb3 = []\n",
                "                rb3 = []\n",
                "                inf_cl3 = []\n",
                "                sup_cl3 = []\n",
                "                in_or_out3 = []\n",
                "                #armazenara se esta dentro ou fora dos limites\n",
                "                \n",
                "                i = 0\n",
                "                while (i < size3):\n",
                "                   yb3.append(y_barra3)\n",
                "                   rb3.append(r_barra3)\n",
                "                   inf_cl3.append(lcl3)\n",
                "                   sup_cl3.append(ucl3)\n",
                "                   \n",
                "                   if (y3[i] > ucl3) or (y3[i] < lcl3):\n",
                "                       in_or_out3.append(\"Out of Control Limits!\")\n",
                "                       print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x3[i], y3[i]))\n",
                "                       \n",
                "                   else:\n",
                "                       in_or_out3.append(\"In Control Limits\")\n",
                "                   \n",
                "                   if not (lim_especificacao is None):\n",
                "                   \n",
                "                       if (y3[i] > usl) or (y3[i] < lsl):\n",
                "                           in_or_out_spec3.append(\"Out of Specification Limits!\")\n",
                "                           print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x3[i], y3[i]))\n",
                "                       \n",
                "                       else:\n",
                "                           in_or_out_spec3.append(\"In Specification Limits\") \n",
                "                   \n",
                "                   i = i + 1\n",
                "                \n",
                "                i = 1\n",
                "                while (i < size4):\n",
                "                    moving_range = y4[i] - y4[i-1]\n",
                "                    #deve ser considerado o valor absoluto da diferenca\n",
                "                    moving_range = abs(moving_range)\n",
                "                    mR4.append(moving_range)\n",
                "                    #a lista mR armazena os moving ranges\n",
                "                    i = i + 1\n",
                "                \n",
                "                r_barra4 = np.average(mR4)\n",
                "                lcl4 = y_barra4 - (2.66)*(r_barra4)\n",
                "                ucl4 = y_barra4 + (2.66)*(r_barra4)\n",
                "                \n",
                "                yb4 = []\n",
                "                rb4 = []\n",
                "                inf_cl4 = []\n",
                "                sup_cl4 = []\n",
                "                in_or_out4 = []\n",
                "                #armazenara se esta dentro ou fora dos limites\n",
                "                \n",
                "                i = 0\n",
                "                while (i < size4):\n",
                "                   yb4.append(y_barra4)\n",
                "                   rb4.append(r_barra4)\n",
                "                   inf_cl4.append(lcl4)\n",
                "                   sup_cl4.append(ucl4)\n",
                "                   \n",
                "                   if (y4[i] > ucl4) or (y4[i] < lcl4):\n",
                "                       in_or_out4.append(\"Out of Control Limits!\")\n",
                "                       print(\"Measurement: X = %.2f, Y = %.2f out of control limits!\" %(x4[i], y4[i]))\n",
                "                       \n",
                "                   else:\n",
                "                       in_or_out4.append(\"In Control Limits\")\n",
                "                   \n",
                "                   if not (lim_especificacao is None):\n",
                "                   \n",
                "                       if (y4[i] > usl) or (y4[i] < lsl):\n",
                "                           in_or_out_spec4.append(\"Out of Specification Limits!\")\n",
                "                           print(\"Measurement: X = %.2f, Y = %.2f out of specification limits!\" %(x4[i], y4[i]))\n",
                "                       \n",
                "                       else:\n",
                "                           in_or_out_spec4.append(\"In Specification Limits\") \n",
                "                   \n",
                "                   i = i + 1\n",
                "                \n",
                "                y = np.concatenate((y1, y2, y3, y4), axis=None)               \n",
                "                mR = np.concatenate((mR1, mR2, mR3, mR4), axis=None)\n",
                "                yb = np.concatenate((yb1, yb2, yb3, yb4), axis=None)\n",
                "                rb = np.concatenate((rb1, rb2, rb3, rb4), axis=None)\n",
                "                inf_cl = np.concatenate((inf_cl1, inf_cl2, inf_cl3, inf_cl4), axis=None)\n",
                "                sup_cl = np.concatenate((sup_cl1, sup_cl2, sup_cl3, sup_cl4), axis=None)\n",
                "                in_or_out = np.concatenate((in_or_out1, in_or_out2, in_or_out3, in_or_out4), axis=None)\n",
                "                \n",
                "                if not (lim_especificacao is None):\n",
                "                    in_or_out_spec = np.concatenate((in_or_out_spec1, in_or_out_spec2, in_or_out_spec3, in_or_out_spec4), axis=None)\n",
                "                  \n",
                "            \"\"\"\n",
                "            ------------------------------------------------------------------\n",
                "            Aqui termina o else do caso de haver time tags e retornamos \n",
                "            para o geral: criação do gráfico e da tabela de dados.\n",
                "            ------------------------------------------------------------------\n",
                "            \"\"\"\n",
                "            #neste caso temos media movel, por isso nao usaremos uma string fixa \n",
                "            if not (lim_especificacao is None):\n",
                "                d = {x_label: x, y_label: y, 'Tag': tag_x, 'Moving Range': mR, \n",
                "                     'Mean': yb, 'Mean Range': rb, 'Lower Control Limit': inf_cl,\n",
                "                     'Upper Control Limit': sup_cl, \n",
                "                     'Measurement: in or out of Control Limits?': in_or_out,\n",
                "                     'Measurement: in or out of Specification Limits?': in_or_out_spec}\n",
                "                            \n",
                "            else:    \n",
                "                d = {x_label: x, y_label: y, 'Tag': tag_x, 'Moving Range': mR, \n",
                "                     'Mean': yb, 'Mean Range': rb, 'Lower Control Limit': inf_cl,\n",
                "                     'Upper Control Limit': sup_cl, \n",
                "                     'Measurement: in or out of Control Limits?': in_or_out}\n",
                "                    \n",
                "            #Criar uma tabela de saida com os dados do gráfico:\n",
                "            control_chart_table_I_MR = pd.DataFrame(data = d)\n",
                "            \n",
                "            # Criar gráfico de individuais\n",
                "            fig, ax = plt.subplots()\n",
                "            #e possivel criar os subplots ax[0], ax[1], etc, com o mesmo eixo x\n",
                "            #para isso, substitua o parenteses por (1, figsize=(15,15), sharex=True)\n",
                "            #sharex = True indicara o mesmo eixo X\n",
                "            #o numero 2 indica 2 subplots, 3, indicaria 3 subplots, etc\n",
                "            \n",
                "            #ADICAO DE RETAS CONSTANTES HORIZONTAIS:\n",
                "            #comando .axhline so pode ser usado para retas constantes \n",
                "            #h - horizontal\n",
                "            \n",
                "            #ADICAO DE RETAS QUE FORMAM DEGRAUS\n",
                "            #para degraus, usa-se: .step\n",
                "            \n",
                "            #ADICAO DE RETAS CONSTANTES VERTICAIS:\n",
                "            #para retas verticais, o comando é: .axvline\n",
                "            #v - vertical\n",
                "            \n",
                "            # Grafico de individuais\n",
                "            ax.plot(x, y, linestyle='-', marker='o', color='black', label = 'Data')\n",
                "            #dados: pontos ligados por splines retas\n",
                "            ax.step(x, y = yb, color='blue', label = 'Mean')\n",
                "            #linha media\n",
                "            ax.step(x, y = sup_cl, color = 'red', linestyle = 'dashed', label = 'Control\\nlimits')\n",
                "            #limite superior de controle\n",
                "            ax.step(x, y = inf_cl, color = 'red', linestyle = 'dashed')\n",
                "            #limite inferior de controle\n",
                "            \n",
                "            #adicionar limites de especificacao, caso existam:\n",
                "            if not (lim_especificacao is None):\n",
                "                #limite superior de especificacao:\n",
                "                ax.axhline(usl, color = 'green', linestyle = 'dashed', label = 'Specification\\nlimits')\n",
                "                #limite inferior de especificacao:\n",
                "                ax.axhline(lsl, color = 'green', linestyle = 'dashed')\n",
                "            \n",
                "            #adicionar retas verticais indicando as mudancas de tags\n",
                "            \n",
                "            if(n_tags >= 2):\n",
                "                indice1 = indices_of_tags[0]\n",
                "                #note que este e o indice do primeiro valor na nova tag:\n",
                "                # x[indice1]\n",
                "                #o ultimo valor na tag anterior, onde ocorre o degrau do\n",
                "                #limite de controle e dado por:\n",
                "                tagline1 = x[(indice1-1)]\n",
                "                    \n",
                "                #posicao da primeira quebra, no eixo X\n",
                "                ax.axvline(tagline1, color = 'black', linestyle = 'dashed', label = 'Tag\\nchanges')\n",
                "                \n",
                "                if(n_tags >= 3):\n",
                "                    #apenas se tem a 3a tag\n",
                "                    indice2 = indices_of_tags[1]\n",
                "                   \n",
                "                    tagline2 = x[(indice2-1)]\n",
                "                    ax.axvline(tagline2, color = 'black', linestyle = 'dashed')\n",
                "                    \n",
                "                    if (n_tags >= 4):\n",
                "                        #adiciona a ultima apenas se tiver as 4 tags\n",
                "                        indice3 = indices_of_tags[2]\n",
                "                        \n",
                "                        tagline3 = x[(indice3-1)]\n",
                "                        ax.axvline(tagline3, color = 'black', linestyle = 'dashed')\n",
                "            \n",
                "            ax.set_title('Individual - Moving Range Control Chart - I-MR')\n",
                "            ax.set(xlabel=x_label, ylabel=y_label)\n",
                "            ax.grid(True) #mude para False, caso não deseje ver as linhas de grade\n",
                "            \n",
                "            ax.legend()\n",
                "            plt.show()\n",
                "        \n",
                "            return control_chart_table_I_MR"
            ],
            "metadata": {
                "tags": [
                    "CELL_8"
                ],
                "azdata_cell_guid": "d8739b56-4338-47f3-90ed-601a5a038b84"
            },
            "outputs": [],
            "execution_count": 8
        },
        {
            "cell_type": "markdown",
            "source": [
                "# CÉLULA 9: INSTRUÇÕES de uso da Função do gráfico de controle de individuais I-MR\n",
                "\n",
                "### ATENÇÃO: NÃO EXECUTE ESTA CÉLULA - Ela contém apenas texto explicativo\n",
                "\n",
                "1) Esta função retorna 1 gráfico: I-MR e um dataframe: control_chart_table_I_MR\n",
                "    \n",
                "Declare o dataframe que receberá control_chart_table_I_MR, para obter os dados utilizados para construção do gráfico de controle, com indicação de pontos que possam ter ultrapassado os limites de controle e/ou de especificação.\n",
                "\n",
                "2) Os parâmetros x e y da função devem ser apenas listas, não dataframe(s)\n",
                "   \n",
                "   Crie uma variável para cada coluna, ou declare, por exemplo:\n",
                "        \n",
                "        x = dataframe['Coluna X']\n",
                "\n",
                "3) Você utilizou diferentes estágios ou tratamentos? Por exemplo, para testar o efeito de uma mudança? Ou existem medidas que foram coletadas por um método A e outras pelo método B. Ou existe uma variável que identifica diferentes períodos (uma tag temporal), e você deseja avaliar os dados separando por tag?\n",
                "    \n",
                "Neste caso, a variável (coluna) da tag temporal (estágio) deve ser indicada em \n",
                "\n",
                "        tag_x = variavel.\n",
                "\n",
                "Caso não haja tag, mantenha \n",
                "        \n",
                "        tag_x = None\n",
                "\n",
                "- UTILIZE NO MAXIMO 4 TAGS DIFERENTES PARA O GRÁFICO DE CONTROLE\n",
                "\n",
                "4) Se desejar incluir limites de especificação, inclua-os como uma lista.\n",
                "   Por exemplo, se os limites de especificação são entre 10 a 20 kg:\n",
                "        \n",
                "        lim_especificacao = [10, 20]\n",
                "    \n",
                "Inclua apenas dois elementos na lista, separados por vírgula. O primeiro será o limite inferior, o segundo será o limite de especificação superior. \n",
                "    \n",
                "    ATENÇÃO: O separador de casas decimais é o ponto.\n",
                "    \n",
                "Outros exemplos:\n",
                "    \n",
                "    limites entre 10000 a 15000 reais: lim_especificacao = [10000, 15000]\n",
                "    \n",
                "    limites de pH entre 2.71 e 3.50: lim_especificacao = [2.71, 3.50]\n",
                "\n",
                "4) Os demais parâmetros são textos (strings). Declare-os entre aspas ou mantenha o valor None"
            ],
            "metadata": {
                "tags": [
                    "CELL_9"
                ],
                "azdata_cell_guid": "f8d6f1bd-81d4-4536-a5e2-2ba96018c36f"
            }
        },
        {
            "cell_type": "code",
            "source": [
                "## CÉLULA 10: CONSTRUÇÃO DO GRÁFICO I-MR PARA SEUS DADOS\n",
                "\n",
                "#DEFINA A VARIAVEL X. Basta substituir o valor entre aspas pelo nome da coluna onde está X:\n",
                "train_x = df_train['Asset id']\n",
                "\n",
                "#DEFINA A VARIAVEL y. Basta substituir o valor entre aspas pelo nome da coluna onde está Y:\n",
                "train_y = df_train['runtime']\n",
                "\n",
                "\n",
                "\"\"\"MARCADORES TEMPORAIS - TAGS\n",
                "\n",
                "Existem tags? As tags separam seu gráfico em diversos momentos/estágios. Para cada estágio, será calculada uma média e \n",
                "limites de controle separados.\n",
                "\n",
                "Em geral, tags são indicadas quando ocorreu uma mudança no processo, e permite verificar se há melhora ou queda dos\n",
                "indicadores\n",
                "\n",
                "se houver tags, copie a seguinte linha para o espaço não-vermelho após as aspas.\n",
                "\n",
                "-Substitua o texto entre aspas pelo nome da coluna que contêm as tags\n",
                "\n",
                "tag = dataset['tagX']\n",
                "\n",
                "\"\"\"\n",
                "control_chart_table_I_MR_train = i_mr(x = train_x, y = train_y, tag_x = None, lim_especificacao = None, legenda_dos_dados = None, titulo_x = None, titulo_y = None)\n",
                "\n",
                "#Substitua tag_x = None por tag_x = tag, caso haja marcadores temporais\n",
                "\n",
                "\"\"\"\n",
                "Substitua os demais campos None de acordo com as instruções dadas na CÉLULA 9. Lembre-se que o lim_especificacao \n",
                "deve ser fornecido no formato [2.71, 3.50] (dois valores sequenciais, separados por vírgula, e entre colchetes. \n",
                "O primeiro é o limite de especificação inferior, e o segundo é o superior).\n",
                "- Os títulos e legendas devem ser fornecidos como um texto entre aspas\n",
                "\n",
                "\"\"\"\n",
                "\n",
                "\n",
                "\"\"\"VOCÊ DESEJA EXPORTAR OS DADOS?\n",
                "Caso deseje exportar os dados, copie a seguinte linha para o espaço não-vermelho após as aspas. Substitua o endereço pela\n",
                "pasta onde você deseja salvar seu arquivo. Substitua IMR_chart pelo nome que deseja para seu arquivo. Mantenha\n",
                "a extensão csv\n",
                "\n",
                "control_chart_table_I_MR.to_csv(r\"D:\\Drive\\FM2S\\EAD\\Green Belt em Python\\Machine Learning - módulo 3 - ANN classification\\ANN.Class - 1 - user satisfaction\\IMR_chart.csv\", index = False)\n",
                "\n",
                "\"\"\"\n",
                ""
            ],
            "metadata": {
                "tags": [
                    "CELL_10"
                ],
                "azdata_cell_guid": "31fa77e1-d314-49a8-8387-b98c4a8cca76"
            },
            "outputs": [
                {
                    "name": "stdout",
                    "text": "Measurement: X = 69.00, Y = 362.00 out of control limits!\n",
                    "output_type": "stream"
                },
                {
                    "data": {
                        "text/plain": "<Figure size 432x288 with 1 Axes>",
                        "image/png": "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\n"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": "'VOCÊ DESEJA EXPORTAR OS DADOS?\\nCaso deseje exportar os dados, copie a seguinte linha para o espaço não-vermelho após as aspas. Substitua o endereço pela\\npasta onde você deseja salvar seu arquivo. Substitua IMR_chart pelo nome que deseja para seu arquivo. Mantenha\\na extensão csv\\n\\ncontrol_chart_table_I_MR.to_csv(r\"D:\\\\Drive\\\\FM2S\\\\EAD\\\\Green Belt em Python\\\\Machine Learning - módulo 3 - ANN classification\\\\ANN.Class - 1 - user satisfaction\\\\IMR_chart.csv\", index = False)\\n\\n'"
                    },
                    "metadata": {},
                    "execution_count": 12,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 12
        },
        {
            "cell_type": "code",
            "source": [
                "control_chart_table_I_MR_train"
            ],
            "metadata": {
                "azdata_cell_guid": "7eb71f47-2891-4cd5-bcba-25df64672bb1"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "    X: Individual Measurements  Y: Value  Moving Range  Mean Y: Value  \\\n0                            1       192             0         206.31   \n1                            2       287            95         206.31   \n2                            3       179           108         206.31   \n3                            4       189            10         206.31   \n4                            5       269            80         206.31   \n..                         ...       ...           ...            ...   \n95                          96       336            53         206.31   \n96                          97       202           134         206.31   \n97                          98       156            46         206.31   \n98                          99       185            29         206.31   \n99                         100       200            15         206.31   \n\n    Mean Range  Lower Control Limit  Upper Control Limit  \\\n0        51.36              69.6924             342.9276   \n1        51.36              69.6924             342.9276   \n2        51.36              69.6924             342.9276   \n3        51.36              69.6924             342.9276   \n4        51.36              69.6924             342.9276   \n..         ...                  ...                  ...   \n95       51.36              69.6924             342.9276   \n96       51.36              69.6924             342.9276   \n97       51.36              69.6924             342.9276   \n98       51.36              69.6924             342.9276   \n99       51.36              69.6924             342.9276   \n\n   Measurement: in or out of Control Limits?  \n0                          In Control Limits  \n1                          In Control Limits  \n2                          In Control Limits  \n3                          In Control Limits  \n4                          In Control Limits  \n..                                       ...  \n95                         In Control Limits  \n96                         In Control Limits  \n97                         In Control Limits  \n98                         In Control Limits  \n99                         In Control Limits  \n\n[100 rows x 8 columns]",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>X: Individual Measurements</th>\n      <th>Y: Value</th>\n      <th>Moving Range</th>\n      <th>Mean Y: Value</th>\n      <th>Mean Range</th>\n      <th>Lower Control Limit</th>\n      <th>Upper Control Limit</th>\n      <th>Measurement: in or out of Control Limits?</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>192</td>\n      <td>0</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>287</td>\n      <td>95</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>179</td>\n      <td>108</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>189</td>\n      <td>10</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>269</td>\n      <td>80</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>96</td>\n      <td>336</td>\n      <td>53</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>97</td>\n      <td>202</td>\n      <td>134</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>98</td>\n      <td>156</td>\n      <td>46</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>99</td>\n      <td>185</td>\n      <td>29</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>100</td>\n      <td>200</td>\n      <td>15</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 8 columns</p>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 10,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 10
        },
        {
            "cell_type": "markdown",
            "source": [
                "Grafico de controle dos runtimes de teste"
            ],
            "metadata": {
                "azdata_cell_guid": "bbfafa3d-9f3d-4fb4-a1a3-398d16dd06a8"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "## CÉLULA 10: CONSTRUÇÃO DO GRÁFICO I-MR PARA SEUS DADOS\r\n",
                "\r\n",
                "#DEFINA A VARIAVEL X. Basta substituir o valor entre aspas pelo nome da coluna onde está X:\r\n",
                "test_x = df_test['Asset id']\r\n",
                "\r\n",
                "#DEFINA A VARIAVEL y. Basta substituir o valor entre aspas pelo nome da coluna onde está Y:\r\n",
                "test_y = df_test['runtime']\r\n",
                "\r\n",
                "\r\n",
                "\"\"\"MARCADORES TEMPORAIS - TAGS\r\n",
                "\r\n",
                "Existem tags? As tags separam seu gráfico em diversos momentos/estágios. Para cada estágio, será calculada uma média e \r\n",
                "limites de controle separados.\r\n",
                "\r\n",
                "Em geral, tags são indicadas quando ocorreu uma mudança no processo, e permite verificar se há melhora ou queda dos\r\n",
                "indicadores\r\n",
                "\r\n",
                "se houver tags, copie a seguinte linha para o espaço não-vermelho após as aspas.\r\n",
                "\r\n",
                "-Substitua o texto entre aspas pelo nome da coluna que contêm as tags\r\n",
                "\r\n",
                "tag = dataset['tagX']\r\n",
                "\r\n",
                "\"\"\"\r\n",
                "control_chart_table_I_MR_test = i_mr(x = train_x, y = train_y, tag_x = None, lim_especificacao = None, legenda_dos_dados = None, titulo_x = None, titulo_y = None)\r\n",
                "\r\n",
                "#Substitua tag_x = None por tag_x = tag, caso haja marcadores temporais\r\n",
                "\r\n",
                "\"\"\"\r\n",
                "Substitua os demais campos None de acordo com as instruções dadas na CÉLULA 9. Lembre-se que o lim_especificacao \r\n",
                "deve ser fornecido no formato [2.71, 3.50] (dois valores sequenciais, separados por vírgula, e entre colchetes. \r\n",
                "O primeiro é o limite de especificação inferior, e o segundo é o superior).\r\n",
                "- Os títulos e legendas devem ser fornecidos como um texto entre aspas\r\n",
                "\r\n",
                "\"\"\"\r\n",
                "\r\n",
                "\r\n",
                "\"\"\"VOCÊ DESEJA EXPORTAR OS DADOS?\r\n",
                "Caso deseje exportar os dados, copie a seguinte linha para o espaço não-vermelho após as aspas. Substitua o endereço pela\r\n",
                "pasta onde você deseja salvar seu arquivo. Substitua IMR_chart pelo nome que deseja para seu arquivo. Mantenha\r\n",
                "a extensão csv\r\n",
                "\r\n",
                "control_chart_table_I_MR.to_csv(r\"D:\\Drive\\FM2S\\EAD\\Green Belt em Python\\Machine Learning - módulo 3 - ANN classification\\ANN.Class - 1 - user satisfaction\\IMR_chart.csv\", index = False)\r\n",
                "\r\n",
                "\"\"\""
            ],
            "metadata": {
                "azdata_cell_guid": "70362695-5a50-48e1-b199-7f3c392c503b"
            },
            "outputs": [
                {
                    "name": "stdout",
                    "text": "Measurement: X = 69.00, Y = 362.00 out of control limits!\n",
                    "output_type": "stream"
                },
                {
                    "data": {
                        "text/plain": "<Figure size 432x288 with 1 Axes>",
                        "image/png": "\n"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": "'VOCÊ DESEJA EXPORTAR OS DADOS?\\nCaso deseje exportar os dados, copie a seguinte linha para o espaço não-vermelho após as aspas. Substitua o endereço pela\\npasta onde você deseja salvar seu arquivo. Substitua IMR_chart pelo nome que deseja para seu arquivo. Mantenha\\na extensão csv\\n\\ncontrol_chart_table_I_MR.to_csv(r\"D:\\\\Drive\\\\FM2S\\\\EAD\\\\Green Belt em Python\\\\Machine Learning - módulo 3 - ANN classification\\\\ANN.Class - 1 - user satisfaction\\\\IMR_chart.csv\", index = False)\\n\\n'"
                    },
                    "metadata": {},
                    "execution_count": 13,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 13
        },
        {
            "cell_type": "code",
            "source": [
                "control_chart_table_I_MR_test"
            ],
            "metadata": {
                "azdata_cell_guid": "a0ec0e8d-c98b-409e-ab8b-55611f04f249"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "    X: Individual Measurements  Y: Value  Moving Range  Mean Y: Value  \\\n0                            1       192             0         206.31   \n1                            2       287            95         206.31   \n2                            3       179           108         206.31   \n3                            4       189            10         206.31   \n4                            5       269            80         206.31   \n..                         ...       ...           ...            ...   \n95                          96       336            53         206.31   \n96                          97       202           134         206.31   \n97                          98       156            46         206.31   \n98                          99       185            29         206.31   \n99                         100       200            15         206.31   \n\n    Mean Range  Lower Control Limit  Upper Control Limit  \\\n0        51.36              69.6924             342.9276   \n1        51.36              69.6924             342.9276   \n2        51.36              69.6924             342.9276   \n3        51.36              69.6924             342.9276   \n4        51.36              69.6924             342.9276   \n..         ...                  ...                  ...   \n95       51.36              69.6924             342.9276   \n96       51.36              69.6924             342.9276   \n97       51.36              69.6924             342.9276   \n98       51.36              69.6924             342.9276   \n99       51.36              69.6924             342.9276   \n\n   Measurement: in or out of Control Limits?  \n0                          In Control Limits  \n1                          In Control Limits  \n2                          In Control Limits  \n3                          In Control Limits  \n4                          In Control Limits  \n..                                       ...  \n95                         In Control Limits  \n96                         In Control Limits  \n97                         In Control Limits  \n98                         In Control Limits  \n99                         In Control Limits  \n\n[100 rows x 8 columns]",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>X: Individual Measurements</th>\n      <th>Y: Value</th>\n      <th>Moving Range</th>\n      <th>Mean Y: Value</th>\n      <th>Mean Range</th>\n      <th>Lower Control Limit</th>\n      <th>Upper Control Limit</th>\n      <th>Measurement: in or out of Control Limits?</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>192</td>\n      <td>0</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>287</td>\n      <td>95</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>179</td>\n      <td>108</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>189</td>\n      <td>10</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>269</td>\n      <td>80</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>96</td>\n      <td>336</td>\n      <td>53</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>97</td>\n      <td>202</td>\n      <td>134</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>98</td>\n      <td>156</td>\n      <td>46</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>99</td>\n      <td>185</td>\n      <td>29</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>100</td>\n      <td>200</td>\n      <td>15</td>\n      <td>206.31</td>\n      <td>51.36</td>\n      <td>69.6924</td>\n      <td>342.9276</td>\n      <td>In Control Limits</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 8 columns</p>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 14,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 14
        },
        {
            "cell_type": "markdown",
            "source": [
                "Exportar dataframes dos gráficos de controle"
            ],
            "metadata": {
                "azdata_cell_guid": "419c8b6f-61cd-4d01-a0e5-543d74013364"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "control_chart_table_I_MR_test.to_csv(r'control_chart_table_I_MR_test.csv', index = True)\r\n",
                "control_chart_table_I_MR_train.to_csv(r'control_chart_table_I_MR_train.csv', index = True)"
            ],
            "metadata": {
                "azdata_cell_guid": "998a5273-dd1f-4a03-b860-ab99959bceee"
            },
            "outputs": [],
            "execution_count": 15
        }
    ]
}